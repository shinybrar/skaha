{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Skaha","text":"<p>Skaha Overview</p> <p>A lightweight python interface to the CANFAR Science Platform.</p> <p>Session Creation Example</p> Python Session Creation<pre><code>from skaha.session import AsyncSession\n\nsession = AsyncSession()\nsessions = await session.create(\n    name=\"test\",\n    image=\"images.canfar.net/skaha/base-notebook:latest\",\n    cores=2,\n    ram=8,\n    gpu=1,\n    kind=\"headless\",\n    cmd=\"env\",\n    env={\"KEY\": \"VALUE\"},\n    replicas=3,\n)\n</code></pre> <p>Quick Start  Go to GitHub  Changelog </p>"},{"location":"advanced-examples/","title":"Advanced Examples","text":"<p>Complex use cases and power-user examples for Skaha and the CANFAR Science Platform.</p>"},{"location":"advanced-examples/#quick-start","title":"Quick Start","text":"<p>Info</p> <p>Skaha automatically sets these environment variables in each container:</p> <ul> <li><code>REPLICA_ID</code>: Current container ID (1, 2, 3, ...)</li> <li><code>REPLICA_COUNT</code>: Total number of containers</li> </ul>"},{"location":"advanced-examples/#massively-parallel-processing","title":"Massively Parallel Processing","text":"<p>Let's assume you have a large dataset of 1000 FITS files that you want to process in parallel. You have a Python script that can process a single FITS file, and you want to run this script in parallel on 100 different Skaha sessions.</p> batch_processing.py<pre><code>from skaha.helpers import distributed\nfrom glob import glob\nfrom your.code import process_datafile\n\n# Find all FITS files to process\ndatafiles = glob(\"/path/to/data/files/*.fits\")\n\n# Each replica processes its assigned chunk of files\n# The chunk function automatically handles 1-based REPLICA_ID values\nfor datafile in distributed.chunk(datafiles):\n    process_datafile(datafile)\n</code></pre>"},{"location":"advanced-examples/#launching-analysis-with-python-api","title":"Launching Analysis with Python API","text":"Large-Scale Parallel Processing<pre><code>from skaha.session import AsyncSession\n\nasync with AsyncSession() as session:\n    sessions = await session.create(\n        name=\"fits-processing\",\n        image=\"images.canfar.net/your/analysis-container:latest\",\n        kind=\"headless\",\n        cores=8,\n        ram=32,\n        cmd=\"python\",\n        args=[\"/path/to/batch_processing.py\"],\n        replicas=100,\n    )\n    return sessions\n</code></pre>"},{"location":"advanced-examples/#launching-analysis-with-cli","title":"Launching Analysis with CLI","text":"Large-Scale Parallel Processing<pre><code>skaha create -c 8 -m 32 -r 100 -n fits-processing headless images.canfar.net/your/analysis-container:latest -- python /path/to/batch_processing.py\n</code></pre>"},{"location":"advanced-examples/#distributed-processing-strategies","title":"Distributed Processing Strategies","text":"<p>Skaha provides two main strategies for distributing data across replicas:</p>"},{"location":"advanced-examples/#chunking-strategy-distributedchunk","title":"Chunking Strategy (<code>distributed.chunk</code>)","text":"<p>The <code>chunk</code> function divides your data into contiguous blocks, with each replica processing a consecutive chunk. The function uses 1-based replica IDs (matching Skaha's <code>REPLICA_ID</code> environment variable):</p> Chunking Example<pre><code>from skaha.helpers import distributed\n\n# With 1000 files and 100 replicas:\n# - Replica 1 processes files 0-9\n# - Replica 2 processes files 10-19  \n# - Replica 3 processes files 20-29\n# - And so on...\n\ndatafiles = glob(\"/path/to/data/*.fits\")\nfor datafile in distributed.chunk(datafiles):\n    process_datafile(datafile)\n</code></pre>"},{"location":"advanced-examples/#striping-strategy-distributedstripe","title":"Striping Strategy (<code>distributed.stripe</code>)","text":"<p>The <code>stripe</code> function distributes data in a round-robin fashion, which is useful when file sizes vary significantly:</p> Striping Example<pre><code>from skaha.helpers import distributed\n\n# With 1000 files and 100 replicas:\n# - Replica 1 processes files 0, 100, 200, 300, ...\n# - Replica 2 processes files 1, 101, 201, 301, ...\n# - Replica 3 processes files 2, 102, 202, 302, ...\n# - And so on...\n\ndatafiles = glob(\"/path/to/data/*.fits\")\nfor datafile in distributed.stripe(datafiles):\n    process_datafile(datafile)\n</code></pre>"},{"location":"advanced-examples/#when-to-use-each-strategy","title":"When to Use Each Strategy","text":"<ul> <li>Use <code>chunk</code> when files are similar in size and you want each replica to process a contiguous block of data</li> <li>Use <code>stripe</code> when file sizes vary significantly, as it distributes the workload more evenly across replicas</li> </ul>"},{"location":"advanced-examples/#real-world-example-processing-astronomical-data","title":"Real-World Example: Processing Astronomical Data","text":"<pre><code>import os\nimport json\nfrom pathlib import Path\nfrom skaha.helpers.distributed import chunk\n\ndef process_observations():\n    \"\"\"Process FITS files across multiple containers.\"\"\"\n\n    # Get all observation files\n    fits_files = list(Path(\"/data/observations\").glob(\"*.fits\"))\n    my_files = list(chunk(fits_files))\n\n    if not my_files:\n        print(\"No files assigned to this container\")\n        return\n\n    replica_id = os.environ.get('REPLICA_ID')\n    print(f\"Container {replica_id} processing {len(my_files)} files\")\n\n    # Process each file\n    results = []\n    for fits_file in my_files:\n        # Your analysis code here\n        result = {\"file\": fits_file.name, \"stars_detected\": analyze_fits(fits_file)}\n        results.append(result)\n\n    # Save results with container ID\n    output_file = f\"/results/container_{replica_id}_results.json\"\n    with open(output_file, 'w') as f:\n        json.dump(results, f, indent=2)\n\n    print(f\"Saved {len(results)} results to {output_file}\")\n\ndef analyze_fits(fits_path):\n    \"\"\"Your FITS analysis logic here.\"\"\"\n    return 42  # Placeholder\n</code></pre>"},{"location":"advanced-examples/#best-practices","title":"Best Practices","text":"<p>Choose the right function: - Use <code>chunk()</code> when you need contiguous data blocks - Use <code>stripe()</code> for round-robin distribution</p> <p>Handle empty containers: <pre><code>my_data = list(chunk(data))\nif not my_data:\n    print(\"No data for this container\")\n    return\n</code></pre></p> <p>Save results with container ID: <pre><code>import os\nreplica_id = os.environ.get('REPLICA_ID')\noutput_file = f\"/results/container_{replica_id}_results.json\"\n</code></pre></p> <p>Combine results from all containers: <pre><code>from pathlib import Path\nimport json\n\ndef combine_results():\n    \"\"\"Merge results from all containers.\"\"\"\n    all_results = []\n    for result_file in Path(\"/results\").glob(\"container_*_results.json\"):\n        with open(result_file) as f:\n            all_results.extend(json.load(f))\n\n    with open(\"/results/final_results.json\", 'w') as f:\n        json.dump(all_results, f, indent=2)\n</code></pre></p>"},{"location":"advanced-examples/#creating-distributed-sessions","title":"Creating Distributed Sessions","text":"<p>Create multiple containers for distributed processing:</p> <pre><code># Create 5 containers for distributed analysis\nskaha create headless images.canfar.net/skaha/astronomy:latest -r 5 -- python3 /scripts/process_data.py\n</code></pre>"},{"location":"advanced-examples/#common-issues","title":"Common Issues","text":"<p>Some containers get no data This happens when you have more containers than data items. Handle it gracefully: <pre><code>my_data = list(chunk(data))\nif not my_data:\n    print(\"No data assigned to this container\")\n    return\n</code></pre></p> <p>Debugging distribution <pre><code>import os\nreplica_id = os.environ.get('REPLICA_ID')\nreplica_count = os.environ.get('REPLICA_COUNT')\nprint(f\"Container {replica_id} of {replica_count} processing {len(my_data)} items\")\n</code></pre></p>"},{"location":"async_session/","title":"Asynchronous Sessions","text":"<p>Overview</p> <p>Skaha now supports asynchronous sessions using the <code>AsyncSession</code> class while maintaining 1-to-1 compatibility with the <code>Session</code> class.</p> <p>               Bases: <code>SkahaClient</code></p> <p>Asynchronous Skaha Session Management Client.</p> <p>This class provides methods to manage sessions in the system, including fetching session details, creating new sessions, retrieving logs, and destroying existing sessions.</p> <p>Parameters:</p> Name Type Description Default <code>SkahaClient</code> <code>SkahaClient</code> <p>Base HTTP client for making API requests.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import AsyncSession\n&gt;&gt;&gt; session = AsyncSession(\n        server=\"https://something.example.com\",\n        version=\"v1\",\n        token=\"token\",\n        timeout=30,\n        concurrency=100,\n        loglevel=40,\n    )\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>class AsyncSession(SkahaClient):\n    \"\"\"Asynchronous Skaha Session Management Client.\n\n    This class provides methods to manage sessions in the system,\n    including fetching session details, creating new sessions,\n    retrieving logs, and destroying existing sessions.\n\n    Args:\n        SkahaClient (SkahaClient): Base HTTP client for making API requests.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import AsyncSession\n        &gt;&gt;&gt; session = AsyncSession(\n                server=\"https://something.example.com\",\n                version=\"v1\",\n                token=\"token\",\n                timeout=30,\n                concurrency=100,\n                loglevel=40,\n            )\n    \"\"\"\n\n    async def fetch(\n        self,\n        kind: Kind | None = None,\n        status: Status | None = None,\n        view: View | None = None,\n    ) -&gt; list[dict[str, str]]:\n        \"\"\"List open sessions for the user.\n\n        Args:\n            kind (Kind | None, optional): Session kind. Defaults to None.\n            status (Status | None, optional): Session status. Defaults to None.\n            view (View | None, optional): Session view level. Defaults to None.\n\n        Notes:\n            By default, only the calling user's sessions are listed. If views is\n            set to 'all', all user sessions are listed (with limited information).\n\n        Returns:\n            list: Sessions information.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import AsyncSession\n            &gt;&gt;&gt; session = AsyncSession()\n            &gt;&gt;&gt; await session.fetch(kind=\"notebook\")\n            [{'id': 'vl91sfzz',\n            'userid': 'brars',\n            'runAsUID': '166169204',\n            'runAsGID': '166169204',\n            'supplementalGroups': [34241,\n            34337,\n            35124,\n            36227,\n            1902365706,\n            1454823273,\n            1025424273],\n            'appid': '&lt;none&gt;',\n            'image': 'image-server/repo/image:version',\n            'type': 'notebook',\n            'status': 'Running',\n            'name': 'notebook1',\n            'startTime': '2025-03-05T21:48:29Z',\n            'expiryTime': '2025-03-09T21:48:29Z',\n            'connectURL': 'https://canfar.net/session/notebook/some/url',\n            'requestedRAM': '8G',\n            'requestedCPUCores': '2',\n            'requestedGPUCores': '0',\n            'ramInUse': '&lt;none&gt;',\n            'gpuRAMInUse': '&lt;none&gt;',\n            'cpuCoresInUse': '&lt;none&gt;',\n            'gpuUtilization': '&lt;none&gt;'}]\n        \"\"\"\n        parameters: dict[str, Any] = build.fetch_parameters(kind, status, view)\n        response: Response = await self.asynclient.get(url=\"session\", params=parameters)\n        data: list[dict[str, str]] = response.json()\n        return data\n\n    async def stats(self) -&gt; dict[str, Any]:\n        \"\"\"Get statistics for the entire skaha cluster.\n\n        Returns:\n            Dict[str, Any]: Cluster statistics.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import AsyncSession\n            &gt;&gt;&gt; session = AsyncSession()\n            &gt;&gt;&gt; await session.stats()\n            {'instances': {\n             'session': 88, 'desktopApp': 30, 'headless': 0, 'total': 118},\n             'cores': {'requestedCPUCores': 377,\n             'coresAvailable': 960,\n             'maxCores': {'cores': 32, 'withRam': '147Gi'}},\n             'ram': {'maxRAM': {'ram': '226Gi', 'withCores': 32}}}\n        \"\"\"\n        parameters = {\"view\": \"stats\"}\n        response: Response = await self.asynclient.get(\"session\", params=parameters)\n        data: dict[str, Any] = response.json()\n        return data\n\n    async def info(self, ids: list[str] | str) -&gt; list[dict[str, Any]]:\n        \"\"\"Get information about session[s].\n\n        Args:\n            ids (Union[List[str], str]): Session ID[s].\n\n        Returns:\n            Dict[str, Any]: Session information.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import AsyncSession\n            &gt;&gt;&gt; session = AsyncSession()\n            &gt;&gt;&gt; await session.info(session_id=\"hjko98yghj\")\n            &gt;&gt;&gt; await session.info(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        # Convert id to list if it is a string\n        if isinstance(ids, str):\n            ids = [ids]\n        parameters: dict[str, str] = {\"view\": \"event\"}\n        results: list[dict[str, Any]] = []\n        tasks: list[Any] = []\n        semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n\n        async def bounded(value: str) -&gt; dict[str, Any]:\n            async with semaphore:\n                response = await self.asynclient.get(\n                    url=f\"session/{value}\",\n                    params=parameters,\n                )\n                data: dict[str, Any] = response.json()\n                return data\n\n        tasks = [bounded(value) for value in ids]\n        responses = await asyncio.gather(*tasks, return_exceptions=True)\n        for reply in responses:\n            if isinstance(reply, Exception):\n                log.error(reply)\n            elif isinstance(reply, dict):\n                results.append(reply)\n        return results\n\n    async def logs(\n        self,\n        ids: list[str] | str,\n        verbose: bool = False,\n    ) -&gt; dict[str, str] | None:\n        \"\"\"Get logs from a session[s].\n\n        Args:\n            ids (Union[List[str], str]): Session ID[s].\n            verbose (bool, optional): Print logs to stdout. Defaults to False.\n\n        Returns:\n            Dict[str, str]: Logs in text/plain format.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import AsyncSession\n            &gt;&gt;&gt; session = AsyncSession()\n            &gt;&gt;&gt; await session.logs(id=\"hjko98yghj\")\n            &gt;&gt;&gt; await session.logs(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        if isinstance(ids, str):\n            ids = [ids]\n        parameters: dict[str, str] = {\"view\": \"logs\"}\n        results: dict[str, str] = {}\n\n        semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n        tasks: list[Any] = []\n\n        async def bounded(value: str) -&gt; tuple[str, str]:\n            async with semaphore:\n                response = await self.asynclient.get(\n                    url=f\"session/{value}\",\n                    params=parameters,\n                )\n                return value, response.text\n\n        tasks = [bounded(value) for value in ids]\n        responses = await asyncio.gather(*tasks, return_exceptions=True)\n        for reply in responses:\n            if isinstance(reply, Exception):\n                log.error(reply)\n            elif isinstance(reply, tuple):\n                results[reply[0]] = reply[1]\n\n        # Print logs to stdout if verbose is set to True\n        if verbose:\n            for key, value in results.items():\n                log.info(\"Session ID: %s\\n\", key)\n                log.info(value)\n            return None\n        return results\n\n    async def create(\n        self,\n        name: str,\n        image: str,\n        cores: int = 2,\n        ram: int = 4,\n        kind: Kind = \"headless\",\n        gpu: int | None = None,\n        cmd: str | None = None,\n        args: str | None = None,\n        env: dict[str, Any] | None = None,\n        replicas: int = 1,\n    ) -&gt; list[str]:\n        \"\"\"Launch a skaha session.\n\n        Args:\n            name (str): A unique name for the session.\n            image (str): Container image to use for the session.\n            cores (int, optional): Number of cores. Defaults to 2.\n            ram (int, optional): Amount of RAM (GB). Defaults to 4.\n            kind (str, optional): Type of skaha session. Defaults to \"headless\".\n            gpu (Optional[int], optional): Number of GPUs. Defaults to None.\n            cmd (Optional[str], optional): Command to run. Defaults to None.\n            args (Optional[str], optional): Arguments to the command. Defaults to None.\n            env (Optional[Dict[str, Any]], optional): Environment variables to inject.\n                Defaults to None.\n            replicas (int, optional): Number of sessions to launch. Defaults to 1.\n\n        Notes:\n            The name of the session suffixed with the replica number. eg. test-1, test-2\n            Each container will have the following environment variables injected:\n                * REPLICA_ID - The replica number\n                * REPLICA_COUNT - The total number of replicas\n\n        Returns:\n            List[str]: A list of session IDs for the launched sessions.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import AsyncSession\n            &gt;&gt;&gt; session = AsyncSession()\n            &gt;&gt;&gt; session.create(\n                    name=\"test\",\n                    image='images.canfar.net/skaha/terminal:1.1.1',\n                    cores=2,\n                    ram=8,\n                    gpu=1,\n                    kind=\"headless\",\n                    cmd=\"env\",\n                    env={\"TEST\": \"test\"},\n                    replicas=2,\n                )\n            &gt;&gt;&gt; [\"hjko98yghj\", \"ikvp1jtp\"]\n        \"\"\"\n        payloads: list[list[tuple[str, Any]]] = build.create_parameters(\n            name,\n            image,\n            cores,\n            ram,\n            kind,\n            gpu,\n            cmd,\n            args,\n            env,\n            replicas,\n        )\n        results: list[str] = []\n        tasks: list[Any] = []\n        semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n\n        async def bounded(parameters: list[tuple[str, Any]]) -&gt; Any:\n            async with semaphore:\n                log.debug(\"HTTP Request Parameters: %s\", parameters)\n                response = await self.asynclient.post(url=\"session\", params=parameters)\n                return response.text.rstrip(\"\\r\\n\")\n\n        tasks = [bounded(payload) for payload in payloads]\n        msg = f\"Creating {replicas} {kind} session[s].\"\n        log.debug(msg)\n        responses = await asyncio.gather(*tasks, return_exceptions=True)\n        for reply in responses:\n            if isinstance(reply, Exception):\n                log.error(reply)\n            elif isinstance(reply, str):\n                results.append(reply)\n        return results\n\n    async def events(\n        self,\n        ids: str | list[str],\n        verbose: bool = False,\n    ) -&gt; list[dict[str, str]] | None:\n        \"\"\"Get deployment events for a session[s].\n\n        Args:\n            ids (Union[str, List[str]]): Session ID[s].\n            verbose (bool, optional): Print events to stdout. Defaults to False.\n\n        Returns:\n            Optional[List[Dict[str, str]]]: A list of events for the session[s].\n\n        Notes:\n            When verbose is True, the events will be printed to stdout only.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import AsyncSession\n            &gt;&gt;&gt; session = AsyncSession()\n            &gt;&gt;&gt; await session.events(id=\"hjko98yghj\")\n            &gt;&gt;&gt; await session.events(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        if isinstance(ids, str):\n            ids = [ids]\n        results: list[dict[str, str]] = []\n        parameters: dict[str, str] = {\"view\": \"events\"}\n        tasks: list[Any] = []\n        semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n\n        async def bounded(value: str) -&gt; dict[str, str]:\n            async with semaphore:\n                response = await self.asynclient.get(\n                    url=f\"session/{value}\",\n                    params=parameters,\n                )\n                return {value: response.text}\n\n        tasks = [bounded(value) for value in ids]\n        responses = await asyncio.gather(*tasks, return_exceptions=True)\n        for reply in responses:\n            if isinstance(reply, Exception):\n                log.error(reply)\n            elif isinstance(reply, dict):\n                results.append(dict(reply))\n\n        if verbose and results:\n            for result in results:\n                for key, value in result.items():\n                    log.info(\"Session ID: %s\", key)\n                    log.info(value)\n        return results if not verbose else None\n\n    async def destroy(self, ids: str | list[str]) -&gt; dict[str, bool]:\n        \"\"\"Destroy session[s].\n\n        Args:\n            ids (Union[str, List[str]]): Session ID[s].\n\n        Returns:\n            Dict[str, bool]: A dictionary of session IDs\n            and a bool indicating if the session was destroyed.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import AsyncSession\n            &gt;&gt;&gt; session = AsyncSession()\n            &gt;&gt;&gt; await session.destroy(id=\"hjko98yghj\")\n            &gt;&gt;&gt; await session.destroy(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        if isinstance(ids, str):\n            ids = [ids]\n        results: dict[str, bool] = {}\n        semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n        tasks: list[Any] = []\n\n        async def bounded(value: str) -&gt; tuple[str, bool]:\n            async with semaphore:\n                try:\n                    await self.asynclient.delete(url=f\"session/{value}\")\n                except HTTPError as err:\n                    msg = f\"Failed to destroy session {value}: {err}\"\n                    log.exception(msg)\n                    return value, False\n                else:\n                    return value, True\n\n        tasks = [bounded(value) for value in ids]\n        responses = await asyncio.gather(*tasks, return_exceptions=True)\n        for reply in responses:\n            if isinstance(reply, tuple):\n                results[reply[0]] = reply[1]\n        return results\n\n    async def destroy_with(\n        self,\n        prefix: str,\n        kind: Kind = \"headless\",\n        status: Status = \"Succeeded\",\n    ) -&gt; dict[str, bool]:\n        \"\"\"Destroy session[s] matching search criteria.\n\n        Args:\n            prefix (str): Prefix to match in the session name.\n            kind (Kind): Type of session. Defaults to \"headless\".\n            status (Status): Status of the session. Defaults to \"Succeeded\".\n\n\n        Returns:\n            Dict[str, bool]: A dictionary of session IDs\n            and a bool indicating if the session was destroyed.\n\n        Notes:\n            The prefix is case-sensitive.\n            This method is useful for destroying multiple sessions at once.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import AsyncSession\n            &gt;&gt;&gt; session = AsyncSession()\n            &gt;&gt;&gt; await session.destroy_with(prefix=\"test\")\n            &gt;&gt;&gt; await session.destroy_with(prefix=\"test\", kind=\"desktop\")\n            &gt;&gt;&gt; await session.destroy_with(prefix=\"car\", kind=\"carta\", status=\"Running\")\n\n        \"\"\"\n        ids: list[str] = [\n            session[\"id\"]\n            for session in await self.fetch(kind=kind, status=status)\n            if session[\"name\"].startswith(prefix)\n        ]\n        return await self.destroy(ids)\n</code></pre>"},{"location":"async_session/#skaha.session.AsyncSession.create","title":"<code>create(name, image, cores=2, ram=4, kind='headless', gpu=None, cmd=None, args=None, env=None, replicas=1)</code>  <code>async</code>","text":"<p>Launch a skaha session.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A unique name for the session.</p> required <code>image</code> <code>str</code> <p>Container image to use for the session.</p> required <code>cores</code> <code>int</code> <p>Number of cores. Defaults to 2.</p> <code>2</code> <code>ram</code> <code>int</code> <p>Amount of RAM (GB). Defaults to 4.</p> <code>4</code> <code>kind</code> <code>str</code> <p>Type of skaha session. Defaults to \"headless\".</p> <code>'headless'</code> <code>gpu</code> <code>Optional[int]</code> <p>Number of GPUs. Defaults to None.</p> <code>None</code> <code>cmd</code> <code>Optional[str]</code> <p>Command to run. Defaults to None.</p> <code>None</code> <code>args</code> <code>Optional[str]</code> <p>Arguments to the command. Defaults to None.</p> <code>None</code> <code>env</code> <code>Optional[Dict[str, Any]]</code> <p>Environment variables to inject. Defaults to None.</p> <code>None</code> <code>replicas</code> <code>int</code> <p>Number of sessions to launch. Defaults to 1.</p> <code>1</code> Notes <p>The name of the session suffixed with the replica number. eg. test-1, test-2 Each container will have the following environment variables injected:     * REPLICA_ID - The replica number     * REPLICA_COUNT - The total number of replicas</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List[str]: A list of session IDs for the launched sessions.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import AsyncSession\n&gt;&gt;&gt; session = AsyncSession()\n&gt;&gt;&gt; session.create(\n        name=\"test\",\n        image='images.canfar.net/skaha/terminal:1.1.1',\n        cores=2,\n        ram=8,\n        gpu=1,\n        kind=\"headless\",\n        cmd=\"env\",\n        env={\"TEST\": \"test\"},\n        replicas=2,\n    )\n&gt;&gt;&gt; [\"hjko98yghj\", \"ikvp1jtp\"]\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>async def create(\n    self,\n    name: str,\n    image: str,\n    cores: int = 2,\n    ram: int = 4,\n    kind: Kind = \"headless\",\n    gpu: int | None = None,\n    cmd: str | None = None,\n    args: str | None = None,\n    env: dict[str, Any] | None = None,\n    replicas: int = 1,\n) -&gt; list[str]:\n    \"\"\"Launch a skaha session.\n\n    Args:\n        name (str): A unique name for the session.\n        image (str): Container image to use for the session.\n        cores (int, optional): Number of cores. Defaults to 2.\n        ram (int, optional): Amount of RAM (GB). Defaults to 4.\n        kind (str, optional): Type of skaha session. Defaults to \"headless\".\n        gpu (Optional[int], optional): Number of GPUs. Defaults to None.\n        cmd (Optional[str], optional): Command to run. Defaults to None.\n        args (Optional[str], optional): Arguments to the command. Defaults to None.\n        env (Optional[Dict[str, Any]], optional): Environment variables to inject.\n            Defaults to None.\n        replicas (int, optional): Number of sessions to launch. Defaults to 1.\n\n    Notes:\n        The name of the session suffixed with the replica number. eg. test-1, test-2\n        Each container will have the following environment variables injected:\n            * REPLICA_ID - The replica number\n            * REPLICA_COUNT - The total number of replicas\n\n    Returns:\n        List[str]: A list of session IDs for the launched sessions.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import AsyncSession\n        &gt;&gt;&gt; session = AsyncSession()\n        &gt;&gt;&gt; session.create(\n                name=\"test\",\n                image='images.canfar.net/skaha/terminal:1.1.1',\n                cores=2,\n                ram=8,\n                gpu=1,\n                kind=\"headless\",\n                cmd=\"env\",\n                env={\"TEST\": \"test\"},\n                replicas=2,\n            )\n        &gt;&gt;&gt; [\"hjko98yghj\", \"ikvp1jtp\"]\n    \"\"\"\n    payloads: list[list[tuple[str, Any]]] = build.create_parameters(\n        name,\n        image,\n        cores,\n        ram,\n        kind,\n        gpu,\n        cmd,\n        args,\n        env,\n        replicas,\n    )\n    results: list[str] = []\n    tasks: list[Any] = []\n    semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n\n    async def bounded(parameters: list[tuple[str, Any]]) -&gt; Any:\n        async with semaphore:\n            log.debug(\"HTTP Request Parameters: %s\", parameters)\n            response = await self.asynclient.post(url=\"session\", params=parameters)\n            return response.text.rstrip(\"\\r\\n\")\n\n    tasks = [bounded(payload) for payload in payloads]\n    msg = f\"Creating {replicas} {kind} session[s].\"\n    log.debug(msg)\n    responses = await asyncio.gather(*tasks, return_exceptions=True)\n    for reply in responses:\n        if isinstance(reply, Exception):\n            log.error(reply)\n        elif isinstance(reply, str):\n            results.append(reply)\n    return results\n</code></pre>"},{"location":"async_session/#skaha.session.AsyncSession.destroy","title":"<code>destroy(ids)</code>  <code>async</code>","text":"<p>Destroy session[s].</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Union[str, List[str]]</code> <p>Session ID[s].</p> required <p>Returns:</p> Type Description <code>dict[str, bool]</code> <p>Dict[str, bool]: A dictionary of session IDs</p> <code>dict[str, bool]</code> <p>and a bool indicating if the session was destroyed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import AsyncSession\n&gt;&gt;&gt; session = AsyncSession()\n&gt;&gt;&gt; await session.destroy(id=\"hjko98yghj\")\n&gt;&gt;&gt; await session.destroy(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>async def destroy(self, ids: str | list[str]) -&gt; dict[str, bool]:\n    \"\"\"Destroy session[s].\n\n    Args:\n        ids (Union[str, List[str]]): Session ID[s].\n\n    Returns:\n        Dict[str, bool]: A dictionary of session IDs\n        and a bool indicating if the session was destroyed.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import AsyncSession\n        &gt;&gt;&gt; session = AsyncSession()\n        &gt;&gt;&gt; await session.destroy(id=\"hjko98yghj\")\n        &gt;&gt;&gt; await session.destroy(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    if isinstance(ids, str):\n        ids = [ids]\n    results: dict[str, bool] = {}\n    semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n    tasks: list[Any] = []\n\n    async def bounded(value: str) -&gt; tuple[str, bool]:\n        async with semaphore:\n            try:\n                await self.asynclient.delete(url=f\"session/{value}\")\n            except HTTPError as err:\n                msg = f\"Failed to destroy session {value}: {err}\"\n                log.exception(msg)\n                return value, False\n            else:\n                return value, True\n\n    tasks = [bounded(value) for value in ids]\n    responses = await asyncio.gather(*tasks, return_exceptions=True)\n    for reply in responses:\n        if isinstance(reply, tuple):\n            results[reply[0]] = reply[1]\n    return results\n</code></pre>"},{"location":"async_session/#skaha.session.AsyncSession.destroy_with","title":"<code>destroy_with(prefix, kind='headless', status='Succeeded')</code>  <code>async</code>","text":"<p>Destroy session[s] matching search criteria.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>Prefix to match in the session name.</p> required <code>kind</code> <code>Kind</code> <p>Type of session. Defaults to \"headless\".</p> <code>'headless'</code> <code>status</code> <code>Status</code> <p>Status of the session. Defaults to \"Succeeded\".</p> <code>'Succeeded'</code> <p>Returns:</p> Type Description <code>dict[str, bool]</code> <p>Dict[str, bool]: A dictionary of session IDs</p> <code>dict[str, bool]</code> <p>and a bool indicating if the session was destroyed.</p> Notes <p>The prefix is case-sensitive. This method is useful for destroying multiple sessions at once.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import AsyncSession\n&gt;&gt;&gt; session = AsyncSession()\n&gt;&gt;&gt; await session.destroy_with(prefix=\"test\")\n&gt;&gt;&gt; await session.destroy_with(prefix=\"test\", kind=\"desktop\")\n&gt;&gt;&gt; await session.destroy_with(prefix=\"car\", kind=\"carta\", status=\"Running\")\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>async def destroy_with(\n    self,\n    prefix: str,\n    kind: Kind = \"headless\",\n    status: Status = \"Succeeded\",\n) -&gt; dict[str, bool]:\n    \"\"\"Destroy session[s] matching search criteria.\n\n    Args:\n        prefix (str): Prefix to match in the session name.\n        kind (Kind): Type of session. Defaults to \"headless\".\n        status (Status): Status of the session. Defaults to \"Succeeded\".\n\n\n    Returns:\n        Dict[str, bool]: A dictionary of session IDs\n        and a bool indicating if the session was destroyed.\n\n    Notes:\n        The prefix is case-sensitive.\n        This method is useful for destroying multiple sessions at once.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import AsyncSession\n        &gt;&gt;&gt; session = AsyncSession()\n        &gt;&gt;&gt; await session.destroy_with(prefix=\"test\")\n        &gt;&gt;&gt; await session.destroy_with(prefix=\"test\", kind=\"desktop\")\n        &gt;&gt;&gt; await session.destroy_with(prefix=\"car\", kind=\"carta\", status=\"Running\")\n\n    \"\"\"\n    ids: list[str] = [\n        session[\"id\"]\n        for session in await self.fetch(kind=kind, status=status)\n        if session[\"name\"].startswith(prefix)\n    ]\n    return await self.destroy(ids)\n</code></pre>"},{"location":"async_session/#skaha.session.AsyncSession.events","title":"<code>events(ids, verbose=False)</code>  <code>async</code>","text":"<p>Get deployment events for a session[s].</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Union[str, List[str]]</code> <p>Session ID[s].</p> required <code>verbose</code> <code>bool</code> <p>Print events to stdout. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[dict[str, str]] | None</code> <p>Optional[List[Dict[str, str]]]: A list of events for the session[s].</p> Notes <p>When verbose is True, the events will be printed to stdout only.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import AsyncSession\n&gt;&gt;&gt; session = AsyncSession()\n&gt;&gt;&gt; await session.events(id=\"hjko98yghj\")\n&gt;&gt;&gt; await session.events(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>async def events(\n    self,\n    ids: str | list[str],\n    verbose: bool = False,\n) -&gt; list[dict[str, str]] | None:\n    \"\"\"Get deployment events for a session[s].\n\n    Args:\n        ids (Union[str, List[str]]): Session ID[s].\n        verbose (bool, optional): Print events to stdout. Defaults to False.\n\n    Returns:\n        Optional[List[Dict[str, str]]]: A list of events for the session[s].\n\n    Notes:\n        When verbose is True, the events will be printed to stdout only.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import AsyncSession\n        &gt;&gt;&gt; session = AsyncSession()\n        &gt;&gt;&gt; await session.events(id=\"hjko98yghj\")\n        &gt;&gt;&gt; await session.events(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    if isinstance(ids, str):\n        ids = [ids]\n    results: list[dict[str, str]] = []\n    parameters: dict[str, str] = {\"view\": \"events\"}\n    tasks: list[Any] = []\n    semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n\n    async def bounded(value: str) -&gt; dict[str, str]:\n        async with semaphore:\n            response = await self.asynclient.get(\n                url=f\"session/{value}\",\n                params=parameters,\n            )\n            return {value: response.text}\n\n    tasks = [bounded(value) for value in ids]\n    responses = await asyncio.gather(*tasks, return_exceptions=True)\n    for reply in responses:\n        if isinstance(reply, Exception):\n            log.error(reply)\n        elif isinstance(reply, dict):\n            results.append(dict(reply))\n\n    if verbose and results:\n        for result in results:\n            for key, value in result.items():\n                log.info(\"Session ID: %s\", key)\n                log.info(value)\n    return results if not verbose else None\n</code></pre>"},{"location":"async_session/#skaha.session.AsyncSession.fetch","title":"<code>fetch(kind=None, status=None, view=None)</code>  <code>async</code>","text":"<p>List open sessions for the user.</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>Kind | None</code> <p>Session kind. Defaults to None.</p> <code>None</code> <code>status</code> <code>Status | None</code> <p>Session status. Defaults to None.</p> <code>None</code> <code>view</code> <code>View | None</code> <p>Session view level. Defaults to None.</p> <code>None</code> Notes <p>By default, only the calling user's sessions are listed. If views is set to 'all', all user sessions are listed (with limited information).</p> <p>Returns:</p> Name Type Description <code>list</code> <code>list[dict[str, str]]</code> <p>Sessions information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import AsyncSession\n&gt;&gt;&gt; session = AsyncSession()\n&gt;&gt;&gt; await session.fetch(kind=\"notebook\")\n[{'id': 'vl91sfzz',\n'userid': 'brars',\n'runAsUID': '166169204',\n'runAsGID': '166169204',\n'supplementalGroups': [34241,\n34337,\n35124,\n36227,\n1902365706,\n1454823273,\n1025424273],\n'appid': '&lt;none&gt;',\n'image': 'image-server/repo/image:version',\n'type': 'notebook',\n'status': 'Running',\n'name': 'notebook1',\n'startTime': '2025-03-05T21:48:29Z',\n'expiryTime': '2025-03-09T21:48:29Z',\n'connectURL': 'https://canfar.net/session/notebook/some/url',\n'requestedRAM': '8G',\n'requestedCPUCores': '2',\n'requestedGPUCores': '0',\n'ramInUse': '&lt;none&gt;',\n'gpuRAMInUse': '&lt;none&gt;',\n'cpuCoresInUse': '&lt;none&gt;',\n'gpuUtilization': '&lt;none&gt;'}]\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>async def fetch(\n    self,\n    kind: Kind | None = None,\n    status: Status | None = None,\n    view: View | None = None,\n) -&gt; list[dict[str, str]]:\n    \"\"\"List open sessions for the user.\n\n    Args:\n        kind (Kind | None, optional): Session kind. Defaults to None.\n        status (Status | None, optional): Session status. Defaults to None.\n        view (View | None, optional): Session view level. Defaults to None.\n\n    Notes:\n        By default, only the calling user's sessions are listed. If views is\n        set to 'all', all user sessions are listed (with limited information).\n\n    Returns:\n        list: Sessions information.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import AsyncSession\n        &gt;&gt;&gt; session = AsyncSession()\n        &gt;&gt;&gt; await session.fetch(kind=\"notebook\")\n        [{'id': 'vl91sfzz',\n        'userid': 'brars',\n        'runAsUID': '166169204',\n        'runAsGID': '166169204',\n        'supplementalGroups': [34241,\n        34337,\n        35124,\n        36227,\n        1902365706,\n        1454823273,\n        1025424273],\n        'appid': '&lt;none&gt;',\n        'image': 'image-server/repo/image:version',\n        'type': 'notebook',\n        'status': 'Running',\n        'name': 'notebook1',\n        'startTime': '2025-03-05T21:48:29Z',\n        'expiryTime': '2025-03-09T21:48:29Z',\n        'connectURL': 'https://canfar.net/session/notebook/some/url',\n        'requestedRAM': '8G',\n        'requestedCPUCores': '2',\n        'requestedGPUCores': '0',\n        'ramInUse': '&lt;none&gt;',\n        'gpuRAMInUse': '&lt;none&gt;',\n        'cpuCoresInUse': '&lt;none&gt;',\n        'gpuUtilization': '&lt;none&gt;'}]\n    \"\"\"\n    parameters: dict[str, Any] = build.fetch_parameters(kind, status, view)\n    response: Response = await self.asynclient.get(url=\"session\", params=parameters)\n    data: list[dict[str, str]] = response.json()\n    return data\n</code></pre>"},{"location":"async_session/#skaha.session.AsyncSession.info","title":"<code>info(ids)</code>  <code>async</code>","text":"<p>Get information about session[s].</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Union[List[str], str]</code> <p>Session ID[s].</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>Dict[str, Any]: Session information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import AsyncSession\n&gt;&gt;&gt; session = AsyncSession()\n&gt;&gt;&gt; await session.info(session_id=\"hjko98yghj\")\n&gt;&gt;&gt; await session.info(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>async def info(self, ids: list[str] | str) -&gt; list[dict[str, Any]]:\n    \"\"\"Get information about session[s].\n\n    Args:\n        ids (Union[List[str], str]): Session ID[s].\n\n    Returns:\n        Dict[str, Any]: Session information.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import AsyncSession\n        &gt;&gt;&gt; session = AsyncSession()\n        &gt;&gt;&gt; await session.info(session_id=\"hjko98yghj\")\n        &gt;&gt;&gt; await session.info(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    # Convert id to list if it is a string\n    if isinstance(ids, str):\n        ids = [ids]\n    parameters: dict[str, str] = {\"view\": \"event\"}\n    results: list[dict[str, Any]] = []\n    tasks: list[Any] = []\n    semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n\n    async def bounded(value: str) -&gt; dict[str, Any]:\n        async with semaphore:\n            response = await self.asynclient.get(\n                url=f\"session/{value}\",\n                params=parameters,\n            )\n            data: dict[str, Any] = response.json()\n            return data\n\n    tasks = [bounded(value) for value in ids]\n    responses = await asyncio.gather(*tasks, return_exceptions=True)\n    for reply in responses:\n        if isinstance(reply, Exception):\n            log.error(reply)\n        elif isinstance(reply, dict):\n            results.append(reply)\n    return results\n</code></pre>"},{"location":"async_session/#skaha.session.AsyncSession.logs","title":"<code>logs(ids, verbose=False)</code>  <code>async</code>","text":"<p>Get logs from a session[s].</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Union[List[str], str]</code> <p>Session ID[s].</p> required <code>verbose</code> <code>bool</code> <p>Print logs to stdout. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict[str, str] | None</code> <p>Dict[str, str]: Logs in text/plain format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import AsyncSession\n&gt;&gt;&gt; session = AsyncSession()\n&gt;&gt;&gt; await session.logs(id=\"hjko98yghj\")\n&gt;&gt;&gt; await session.logs(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>async def logs(\n    self,\n    ids: list[str] | str,\n    verbose: bool = False,\n) -&gt; dict[str, str] | None:\n    \"\"\"Get logs from a session[s].\n\n    Args:\n        ids (Union[List[str], str]): Session ID[s].\n        verbose (bool, optional): Print logs to stdout. Defaults to False.\n\n    Returns:\n        Dict[str, str]: Logs in text/plain format.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import AsyncSession\n        &gt;&gt;&gt; session = AsyncSession()\n        &gt;&gt;&gt; await session.logs(id=\"hjko98yghj\")\n        &gt;&gt;&gt; await session.logs(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    if isinstance(ids, str):\n        ids = [ids]\n    parameters: dict[str, str] = {\"view\": \"logs\"}\n    results: dict[str, str] = {}\n\n    semaphore: asyncio.Semaphore = asyncio.Semaphore(self.concurrency)\n    tasks: list[Any] = []\n\n    async def bounded(value: str) -&gt; tuple[str, str]:\n        async with semaphore:\n            response = await self.asynclient.get(\n                url=f\"session/{value}\",\n                params=parameters,\n            )\n            return value, response.text\n\n    tasks = [bounded(value) for value in ids]\n    responses = await asyncio.gather(*tasks, return_exceptions=True)\n    for reply in responses:\n        if isinstance(reply, Exception):\n            log.error(reply)\n        elif isinstance(reply, tuple):\n            results[reply[0]] = reply[1]\n\n    # Print logs to stdout if verbose is set to True\n    if verbose:\n        for key, value in results.items():\n            log.info(\"Session ID: %s\\n\", key)\n            log.info(value)\n        return None\n    return results\n</code></pre>"},{"location":"async_session/#skaha.session.AsyncSession.stats","title":"<code>stats()</code>  <code>async</code>","text":"<p>Get statistics for the entire skaha cluster.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dict[str, Any]: Cluster statistics.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import AsyncSession\n&gt;&gt;&gt; session = AsyncSession()\n&gt;&gt;&gt; await session.stats()\n{'instances': {\n 'session': 88, 'desktopApp': 30, 'headless': 0, 'total': 118},\n 'cores': {'requestedCPUCores': 377,\n 'coresAvailable': 960,\n 'maxCores': {'cores': 32, 'withRam': '147Gi'}},\n 'ram': {'maxRAM': {'ram': '226Gi', 'withCores': 32}}}\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>async def stats(self) -&gt; dict[str, Any]:\n    \"\"\"Get statistics for the entire skaha cluster.\n\n    Returns:\n        Dict[str, Any]: Cluster statistics.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import AsyncSession\n        &gt;&gt;&gt; session = AsyncSession()\n        &gt;&gt;&gt; await session.stats()\n        {'instances': {\n         'session': 88, 'desktopApp': 30, 'headless': 0, 'total': 118},\n         'cores': {'requestedCPUCores': 377,\n         'coresAvailable': 960,\n         'maxCores': {'cores': 32, 'withRam': '147Gi'}},\n         'ram': {'maxRAM': {'ram': '226Gi', 'withCores': 32}}}\n    \"\"\"\n    parameters = {\"view\": \"stats\"}\n    response: Response = await self.asynclient.get(\"session\", params=parameters)\n    data: dict[str, Any] = response.json()\n    return data\n</code></pre>"},{"location":"authentication-contexts/","title":"Authentication Guide","text":"<p>Skaha is designed to connect to multiple Science Platform servers around the world. This guide covers everything you need to know about authentication, from basic setup to advanced scenarios.</p>"},{"location":"authentication-contexts/#authentication-overview","title":"Authentication Overview","text":"<p>Skaha uses an Authentication Context system to manage connections to different Science Platform servers. This system supports multiple authentication methods and makes it easy to switch between servers.</p>"},{"location":"authentication-contexts/#what-is-an-authentication-context","title":"What is an Authentication Context?","text":"<p>Think of an authentication context (context for short) as a saved profile that contains:</p> <ul> <li>Server information (URL, capabilities)</li> <li>Authentication credentials (X.509 certificate, OIDC tokens, etc.)</li> <li>User preferences for that specific server</li> </ul> <p>When you use Skaha, one context is always active, and all commands and API calls are directed to that server.</p>"},{"location":"authentication-contexts/#authentication-methods","title":"Authentication Methods","text":"<p>Skaha supports several authentication methods:</p> <p>Authentication Methods</p> <ul> <li>X.509 Certificates - Most common, uses <code>.pem</code> certificate files</li> <li>OIDC Tokens - OpenID Connect for modern authentication flows</li> <li>Bearer Tokens - Direct token authentication for API access</li> </ul> <p>Automatic Configuration</p> <p>Starting with v1.7, Skaha automatically configures the appropriate authentication method based on the server's capabilities and your configuration.</p>"},{"location":"authentication-contexts/#cli-authentication-management","title":"CLI Authentication Management","text":"<p>The Skaha CLI provides comprehensive commands for managing your authentication contexts.</p>"},{"location":"authentication-contexts/#initial-login-skaha-auth-login","title":"Initial Login (<code>skaha auth login</code>)","text":"<p>The <code>login</code> command is your starting point for connecting to any Science Platform server:</p> <pre><code>skaha auth login\n</code></pre> <p>What happens during login:</p> <ol> <li>Server Discovery - Automatically finds available Science Platform servers worldwide</li> <li>Server Selection - Interactive prompt to choose your target server</li> <li>Authentication Flow - Guides you through the server's authentication method</li> <li>Context Creation - Saves your credentials and server configuration</li> <li>Activation - Sets the new context as active for immediate use</li> </ol> <p>Login Options</p> <pre><code># Basic login with server discovery\nskaha auth login\n\n# Include development/testing servers\nskaha auth login --dev\n\n# Include non-responsive servers in discovery\nskaha auth login --dead\n\n# Show detailed server information during selection\nskaha auth login --details\n\n# Force re-authentication for existing context\nskaha auth login --force\n</code></pre>"},{"location":"authentication-contexts/#managing-multiple-contexts","title":"Managing Multiple Contexts","text":"<p>Once you have one or more authentication contexts, you can easily manage them:</p>"},{"location":"authentication-contexts/#listing-contexts-skaha-auth-list","title":"Listing Contexts (<code>skaha auth list</code>)","text":"<p>View all your saved authentication contexts:</p> <pre><code>skaha auth list\n</code></pre> <p>Example Output: <pre><code>                  Available Authentication Contexts                  \n\n  Active   Name          Auth Mode   Server URL                      \n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \n    \u2705     CADC-CANFAR     x509      https://ws-uv.canfar.net/skaha  \n\n           SRCnet-Sweden   oidc      https://services.swesrc.chalmers.se/skaha\n</code></pre></p> <p>The active context (marked with \u2705) determines where your commands are sent.</p>"},{"location":"authentication-contexts/#switching-contexts-skaha-auth-switch","title":"Switching Contexts (<code>skaha auth switch</code>)","text":"<p>Switch between your saved contexts safely:</p> <pre><code>skaha auth switch &lt;CONTEXT_NAME&gt;\n</code></pre> <p>Switching Examples</p> <pre><code># Switch to a different server\nskaha auth switch SRCnet-Sweden\n\n# Switch back to CANFAR\nskaha auth use CADC-CANFAR\n</code></pre> <p>All subsequent commands will use the newly active context.</p>"},{"location":"authentication-contexts/#removing-contexts-skaha-auth-remove","title":"Removing Contexts (<code>skaha auth remove</code>)","text":"<p>Remove contexts you no longer need:</p> <pre><code>skaha auth remove &lt;CONTEXT_NAME&gt;\n</code></pre> <p>Safety Features</p> <ul> <li>You cannot remove the currently active context</li> <li>Switch to a different context first, then remove the unwanted one</li> <li>Removed contexts cannot be recovered (you'll need to login again)</li> </ul>"},{"location":"authentication-contexts/#purging-all-contexts-skaha-auth-purge","title":"Purging All Contexts (<code>skaha auth purge</code>)","text":"<p>Remove all authentication contexts and credentials:</p> <pre><code>skaha auth purge\n</code></pre> <p>Complete Removal</p> <p>This command permanently deletes:</p> <ul> <li>All saved authentication contexts</li> <li>Your entire Skaha configuration file (<code>~/.config/skaha/config.yaml</code>)</li> <li>You'll need to login again to use Skaha</li> </ul> <p>Options: <pre><code># Skip confirmation prompt\nskaha auth purge --yes\n\n# Interactive confirmation (default)\nskaha auth purge\n</code></pre></p>"},{"location":"authentication-contexts/#programmatic-authentication","title":"Programmatic Authentication","text":"<p>Once you have authentication contexts set up via the CLI, you can use them programmatically in your Python code.</p>"},{"location":"authentication-contexts/#using-active-context","title":"Using Active Context","text":"<p>The simplest approach uses your currently active authentication context:</p> <pre><code>from skaha.session import Session\n\n# Uses the active authentication context automatically\nsession = Session()\n\n# Check which context is being used\nprint(f\"Active context: {session.config.active}\")\nprint(f\"Auth Context: {session.config.context}\")\n</code></pre>"},{"location":"authentication-contexts/#authentication-priority","title":"Authentication Priority","text":"<p>When creating a Session, Skaha follows this priority order:</p> <ol> <li>User-provided token (highest priority)</li> <li>User-provided certificate</li> <li>Active authentication context</li> <li>Default certificate location (<code>~/.ssl/cadcproxy.pem</code>)</li> </ol> <pre><code>from pathlib import Path\nfrom pydantic import SecretStr\nfrom skaha.session import Session\n\n# Priority 1: Direct token (overrides everything)\nsession = Session(token=SecretStr(\"your-bearer-token\"))\n\n# Priority 2: Direct certificate (overrides context)\nsession = Session(certificate=Path(\"/path/to/cert.pem\"))\n\n# Priority 3: Uses active context (most common)\nsession = Session()\n</code></pre>"},{"location":"authentication-contexts/#troubleshooting","title":"Troubleshooting","text":""},{"location":"authentication-contexts/#common-authentication-issues","title":"Common Authentication Issues","text":"<p>Login Problems</p> <p>No servers found during discovery</p> <ul> <li>Check your internet connection</li> <li>Try <code>skaha auth login --dead</code> to include non-responsive servers</li> <li>Verify you're not behind a restrictive firewall</li> </ul> <p>Authentication failed</p> <ul> <li>Verify your username and password are correct</li> <li>Check if your account is active on the Science Platform</li> <li>Try logging into the web interface first</li> </ul> <p>Certificate expired</p> <ul> <li>X.509 certificates typically last 10 days</li> <li>Run <code>skaha auth login --force</code> to refresh</li> <li>Check expiry with your authentication status code above</li> </ul> <p>Context Management Issues</p> <p>No active context found</p> <ul> <li>Run <code>skaha auth list</code> to see available contexts</li> <li>Use <code>skaha auth switch &lt;context&gt;</code> to activate one</li> <li>If no contexts exist, run <code>skaha auth login</code></li> </ul> <p>Cannot remove active context</p> <ul> <li>Switch to a different context first: <code>skaha auth switch &lt;other&gt;</code></li> <li>Then remove the unwanted context: <code>skaha auth remove &lt;unwanted&gt;</code></li> </ul>"},{"location":"authentication-contexts/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed authentication logging:</p> <pre><code># CLI debug mode\nskaha auth login --debug\n</code></pre>"},{"location":"authentication-contexts/#getting-help","title":"Getting Help","text":"<p>Support Resources</p> <ul> <li>\ud83d\udcd6 CLI Reference - Complete command documentation</li> <li>\ud83d\udcac Community Discussions - Ask questions</li> <li>\ud83d\udc1b Report Issues - Bug reports and feature requests</li> </ul> <p>```</p>"},{"location":"bug-reports/","title":"Bug Reports","text":"<p>Thank you for taking the time to report a bug! Your feedback helps us improve Skaha for everyone. This guide will help you create effective bug reports that enable us to quickly identify and fix issues.</p>"},{"location":"bug-reports/#before-reporting-a-bug","title":"Before Reporting a Bug","text":"<p>Before creating a new bug report, please:</p> <ol> <li>Search existing issues: Check if the bug has already been reported in our GitHub Issues</li> <li>Update to the latest version: Ensure you're using the latest version of Skaha</li> <li>Check the documentation: Review our documentation to confirm the expected behavior</li> </ol>"},{"location":"bug-reports/#how-to-report-a-bug","title":"How to Report a Bug","text":""},{"location":"bug-reports/#gather-system-information","title":"Gather System Information","text":"<p>Before reporting a bug, collect detailed system information using the Skaha CLI:</p> <pre><code>skaha version --debug\n</code></pre> <p>This command provides comprehensive information about your environment, including:</p> <ul> <li>Client Information: Skaha version, git commit info, and installation method</li> <li>Python Environment: Python version, executable path, and implementation</li> <li>System Details: Operating system, version, architecture, and platform</li> <li>Dependencies: Versions of key packages that might affect functionality</li> </ul>"},{"location":"bug-reports/#create-a-detailed-bug-report","title":"Create a Detailed Bug Report","text":"<p>When creating your bug report, include the following sections:</p> <ol> <li>Bug Description:      Provide a clear and concise description of what the bug is,<ul> <li>What you were trying to do</li> <li>What actually happened</li> <li>What you expected to happen</li> </ul> </li> <li>Steps to Reproduce: List the exact steps to reproduce the behavior, including any relevant commands and options.</li> <li>Expected Behavior: Describe what you expected to happen instead</li> <li>System Information: Include the complete output from <code>skaha version --debug</code></li> <li>Error Messages and Logs: Include any error messages, stack traces, or relevant log output. Use code blocks to format them properly.</li> <li>Screenshots (if applicable): Include screenshots that might help explain the problem</li> <li>Additional Context: Add any other context about the problem, such as<ul> <li>When the issue started occurring</li> <li>Whether it happens consistently or intermittently</li> <li>Any workarounds you've found</li> <li>Related configuration or environment details</li> </ul> </li> </ol>"},{"location":"bug-reports/#what-makes-a-good-bug-report","title":"What Makes a Good Bug Report","text":""},{"location":"bug-reports/#good-bug-reports-include","title":"\u2705 Good Bug Reports Include:","text":"<ul> <li>Clear, descriptive title</li> <li>Complete system information from <code>skaha version --debug</code></li> <li>Detailed steps to reproduce</li> <li>Expected vs. actual behavior</li> <li>Error messages and stack traces</li> <li>Relevant context and environment details</li> </ul>"},{"location":"bug-reports/#avoid-these-common-issues","title":"\u274c Avoid These Common Issues:","text":"<ul> <li>Vague descriptions like \"it doesn't work\"</li> <li>Missing system information</li> <li>Incomplete reproduction steps</li> <li>Screenshots of text instead of copy-pasted text</li> <li>Mixing multiple unrelated issues in one report</li> </ul>"},{"location":"bug-reports/#security-issues","title":"Security Issues","text":"<p>If you discover a security vulnerability, please do not create a public issue. Instead, please refer to our Security Policy for instructions on how to report security issues responsibly.</p>"},{"location":"bug-reports/#getting-help","title":"Getting Help","text":"<p>If you're not sure whether something is a bug or need help with usage:</p> <ul> <li>Check our documentation</li> <li>Ask questions in GitHub Discussions</li> <li>Review existing GitHub Issues</li> </ul>"},{"location":"bug-reports/#after-reporting","title":"After Reporting","text":"<p>After you submit a bug report:</p> <ol> <li>Monitor the issue: Watch for responses from maintainers</li> <li>Provide additional information: Be ready to answer follow-up questions</li> <li>Test fixes: Help test proposed solutions when available</li> <li>Update the issue: Let us know if the problem is resolved</li> </ol> <p>Thank you for helping make Skaha better! \ud83d\ude80</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#170-2025-05-28","title":"1.7.0 (2025-05-28)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>session: added session.events to show deployment events on the cluster, e.g. loading container image etc (58e9bca)</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>security: improvements to assertion checks (2ea1108)</li> <li>security: X509 certs are checked if valid before first conn. to server (08327a9)</li> <li>session: events now returns None, when verbose=True (1b01dd6)</li> <li>session: improved docs, better testing logic to await async sleep (e54b9af)</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>events: added session.events docs (7540062)</li> <li>session: docstring (7189052)</li> </ul>"},{"location":"changelog/#161-2025-05-22","title":"1.6.1 (2025-05-22)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>cleanup: comments (8a1a078)</li> <li>gha: fix for gh-pages push (27aa8f8)</li> <li>Implement httpx error logging hooks and client integration (fee71c2)</li> <li>pre-commit: cleanup (abb0839)</li> <li>security: restricting ssl context to use TLSv1.2 at a minimum (09654d0)</li> </ul>"},{"location":"changelog/#160-2025-05-12","title":"1.6.0 (2025-05-12)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>client: added loglevel to configure the python logging levels (431f46d)</li> <li>client: added token support to skaha client (6c7c748)</li> <li>client: updated skaha client to use httpx instead of requests (4c10de8)</li> <li>logs: added stdout for printing logs in terminal (0c34cad)</li> <li>sessions: added skaha AsyncSession (2693272)</li> <li>sessions: added support for firefly (87d16c1)</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>api: updated context, images, overview with httpx (391e857)</li> <li>client: changed to the default and max values of parallel conns (ce552bf)</li> <li>client: deprecated client.verify since it no longer affects any logic (9eed6e9)</li> <li>client: fixed annotation issues for client, asyncClient (889a6a8)</li> <li>models: models no longer search for SKAHA_REGISTRY_[USERNAME|SECRET] from environ, this will be supported in future releases with a comprehensive environment variable support accross all configurable variables (a1702c9)</li> <li>models: updated checks for session kind (a8317f4)</li> <li>session: fixed sync log output when verbose is True (6ac63f9)</li> <li>session: solidified the skaha async session api, moved common query building logic to utils.build (3f11aee)</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>asyncSession: added docs (a8be7fc)</li> <li>client: updated class docstring (5531c6f)</li> <li>index: typo fixes (bc637c5)</li> <li>index: updates (a3c2e2e)</li> <li>session: updated docs for session and async sessions (7e49fef)</li> <li>updates: docs (c61fecd)</li> <li>updates: site config + token support (54d6ed9)</li> </ul>"},{"location":"changelog/#152-2025-03-03","title":"1.5.2 (2025-03-03)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>session: fixed kind translation for session.create, increased max replicas limit to 512 (9bfe357)</li> </ul>"},{"location":"changelog/#151-2025-02-26","title":"1.5.1 (2025-02-26)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>models: createSpec model now outputs kind with alias type (3184d5c)</li> </ul>"},{"location":"changelog/#150-2024-11-22","title":"1.5.0 (2024-11-22)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>context: updates to context.resources api (4d08876)</li> </ul>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>docker: fix for docker build due to uv path install changes (00fd5de)</li> </ul>"},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>style: updates (e886d77)</li> </ul>"},{"location":"changelog/#144-2024-11-22","title":"1.4.4 (2024-11-22)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>session: fixed set env in session.create (00b67ac)</li> </ul>"},{"location":"changelog/#143-2024-11-08","title":"1.4.3 (2024-11-08)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>models: create.spec model used in session.create now expects env to be None by default (c34b110)</li> </ul>"},{"location":"changelog/#142-2024-10-30","title":"1.4.2 (2024-10-30)","text":""},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>models: added logging (514fda2)</li> </ul>"},{"location":"changelog/#documentation_3","title":"Documentation","text":"<ul> <li>index: updated the landing page (e7dbac2)</li> </ul>"},{"location":"changelog/#141-2024-10-25","title":"1.4.1 (2024-10-25)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>github-actions: added path restrictions for workflow triggers, reduced permissions for build flows (1220765)</li> <li>pyproject: fixed toml file with bad license key (ac1ffb6)</li> </ul>"},{"location":"changelog/#140-2024-10-25","title":"1.4.0 (2024-10-25)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>build: added edge container build and attestation (d07e008)</li> <li>codecov: added badge (373412d)</li> <li>conduct: added a code of conduct for skaha community (f37046e)</li> <li>contributions: added a guideline (271a6df)</li> <li>dockerfile: added base dockerfile for the project (28f7e51)</li> <li>docs: added conduct,contributing,license and security sections to docs (5cac3c0)</li> <li>github-actions: added pypi release action and updated client payload (b0b3593)</li> <li>license: project now uses the AGPLv3 license (706f6f8)</li> <li>module: added support for private container registries (3b47c5c)</li> <li>packaging: moved skaha from poetry backend to uv (3b7b89f)</li> <li>security: added a security policy for the project (1338e7f)</li> <li>security: ossf scorecard (719cdfc)</li> <li>session: added new feature to delete sessions with name prefix, kind and status (056254b), closes #37</li> <li>templates: added bug report and feature requests templates (8a8dd20)</li> </ul>"},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>attestation: added attestation for dockerhub container image (0ff4ba2)</li> <li>badge: update to codeql bagde url (c95b6e0)</li> <li>ci/cd: bugfixes (b4b153c)</li> <li>ci/cd: fix for docs build (98eea9b)</li> <li>ci/cd: fixes for action deprecations, and uv errors (6a5af8c)</li> <li>CI: change to pre-commit checks (6216b02)</li> <li>ci: ci indent fix (4e02f72)</li> <li>ci: fix to edge container build (59924bd)</li> <li>ci: improved secret cleanup (990c5a1)</li> <li>contribution: updated guidelines (bc5400e)</li> <li>dockerfile: fix to stage names (f46b081)</li> <li>docs/ci: small fixes (e92c9eb)</li> <li>docs: updated doc/status/badge links (6efed00)</li> <li>github-actions: added fixes for release deployments (dc1b03d)</li> <li>github-actions: possible fix for deployment action (41e1886)</li> <li>github-actions: release actions now checkout tag_name ref for code (ebffafe)</li> <li>readme: codeql bagde url (197a6eb)</li> <li>tests: debugging ci/cd and common errors (7d6b3a9)</li> <li>tests: fixed issue with session tests (d004fde)</li> <li>tests: fixed issues with codecov tokens (07f87d9)</li> <li>tests: fixed session tests to be more consistent and run ~60s (19f0a6e)</li> <li>tests: fixed threading issue caused when one of the futures timesout (ba55a38)</li> <li>tests: fixes for session tests (b3f3e48)</li> <li>typing: multiple type hint fixes throughout the project (a533481)</li> <li>utils: fixed logging x2 issue (7e218df)</li> </ul>"},{"location":"changelog/#documentation_4","title":"Documentation","text":"<ul> <li>github-actions: changed the workflow name (868e114)</li> <li>README: updated with CI status (175ffce)</li> <li>sessions: added docs for destroy_with fucntionality (afd0a11)</li> <li>skaha: updated all docs (04551c9)</li> </ul>"},{"location":"changelog/#131-2023-11-15","title":"1.3.1 (2023-11-15)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>docs: updated docs to include changelog, added reference for calling gpus in session.create (e58f9be)</li> </ul>"},{"location":"changelog/#130-2023-11-14","title":"1.3.0 (2023-11-14)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>docs: updates with a new ability to edit docs via PR (aa2314d)</li> </ul>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>docs: updated readme (4b81e7e)</li> </ul>"},{"location":"changelog/#120-2023-06-08","title":"1.2.0 (2023-06-08)","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>client: updated client to include skaha version in prep for v1 release (e6360c0)</li> <li>overview: added new overview module (4a6336f)</li> </ul>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>deps: updates (5644e15)</li> <li>session: fix for spawning sessions with gpus (961f766)</li> <li>tests: fixed session tests, which now default spawn with name-{replica-id} format (7e48031)</li> </ul>"},{"location":"changelog/#111-2022-12-16","title":"1.1.1 (2022-12-16)","text":""},{"location":"changelog/#documentation_5","title":"Documentation","text":"<ul> <li>readme: update (1b975b6)</li> </ul>"},{"location":"changelog/#110-2022-12-16","title":"1.1.0 (2022-12-16)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>docs: added build (9049b92)</li> <li>session: create session now embeds two env variables into the container, REPLICA_COUNT and REPLICA_ID (ecbf48a)</li> </ul>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>docs: build command issue (becbc60)</li> <li>docs: fixed build issue (98b0543)</li> </ul>"},{"location":"changelog/#102-2022-12-15","title":"1.0.2 (2022-12-15)","text":""},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>docs: created documentation for the project (e0f5483)</li> </ul>"},{"location":"changelog/#documentation_6","title":"Documentation","text":"<ul> <li>API-Reference: changed where order of docs (569d34f)</li> </ul>"},{"location":"changelog/#101-2022-12-15","title":"1.0.1 (2022-12-15)","text":""},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>env: fixed multiple tests and added support for multiple env parameters (c0500bf)</li> </ul>"},{"location":"changelog/#100-2022-12-14","title":"1.0.0 (2022-12-14)","text":""},{"location":"changelog/#breaking-changes","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>session: this is a signficant change, breaking all backwards compatibility</li> <li>sessions: skaha sessions api is no longer supported, the capability to manage multiple sessions is now provided by default with the skaha.session api itself</li> </ul>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>session: added support for multiple session management (219b74c)</li> <li>sessions: skaha.sessions api deprecated (e184663)</li> </ul>"},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>client: updated session header to have the correct content-type (3146e41)</li> <li>images: images api now always prunes (a436e21)</li> <li>pre-commit: fixed broken pre-commit config (baedb82)</li> <li>type-hints: fixed broken hints (9f4e9db)</li> <li>type-hints: fixed broken type hints (c1d1356)</li> </ul>"},{"location":"changelog/#050-2022-12-14","title":"0.5.0 (2022-12-14)","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>release-please: implemented (2ac9728)</li> </ul>"},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>gha: fix to release action (cc7b61a)</li> </ul>"},{"location":"cli-help/","title":"CLI Reference","text":"<p>The Skaha CLI provides a comprehensive command-line interface for interacting with the Science Platform. This reference covers all available commands and their options.</p> <p>Getting Started</p> <p>The CLI can be accessed using the <code>skaha</code> command in your uv environment: <pre><code>uv run skaha --help\n</code></pre></p>"},{"location":"cli-help/#main-command","title":"Main Command","text":"<pre><code>skaha [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Description: Command Line Interface for Science Platform.</p>"},{"location":"cli-help/#global-options","title":"Global Options","text":"Option Description <code>--install-completion</code> Install completion for the current shell <code>--show-completion</code> Show completion for the current shell, to copy it or customize the installation <code>--help</code> Show help message and exit <p>Shell Completion</p> <p>Enable shell completion for a better CLI experience by running: <pre><code>skaha --install-completion\n</code></pre></p>"},{"location":"cli-help/#authentication-commands","title":"\ud83d\udd10 Authentication Commands","text":""},{"location":"cli-help/#skaha-auth","title":"<code>skaha auth</code>","text":"<p>Authenticate with Science Platform.</p>"},{"location":"cli-help/#skaha-auth-login","title":"<code>skaha auth login</code>","text":"<p>Login to Science Platform with automatic server discovery.</p> <pre><code>skaha auth login [OPTIONS]\n</code></pre> <p>Description: This command guides you through the authentication process, automatically discovering the upstream server and choosing the appropriate authentication method based on the server's configuration.</p>"},{"location":"cli-help/#options","title":"Options","text":"Option Type Default Description <code>--force</code> Flag - Force re-authentication <code>--debug</code> Flag - Enable debug logging <code>--dead</code> Flag - Include dead servers in discovery <code>--dev</code> Flag - Include dev servers in discovery <code>--details</code> Flag - Include server details in discovery <code>--discovery-url</code>, <code>-d</code> TEXT <code>https://ska-iam.stfc.ac.uk/.well-known/openid-configuration</code> OIDC Discovery URL <p>Basic Login</p> <pre><code>skaha auth login\n</code></pre> <p>Login with Debug Information</p> <pre><code>skaha auth login --debug --details\n</code></pre>"},{"location":"cli-help/#skaha-auth-list-skaha-auth-ls","title":"<code>skaha auth list</code> / <code>skaha auth ls</code>","text":"<p>Show all available authentication contexts.</p> <pre><code>skaha auth list [OPTIONS]\n</code></pre> <p>Example</p> <pre><code>skaha auth list\n</code></pre>"},{"location":"cli-help/#skaha-auth-switch-skaha-auth-use","title":"<code>skaha auth switch</code> / <code>skaha auth use</code>","text":"<p>Switch the active authentication context.</p> <pre><code>skaha auth switch CONTEXT\n</code></pre> <p>Arguments: - <code>CONTEXT</code> (required): The name of the context to activate</p> <p>Example</p> <pre><code>skaha auth switch production\n</code></pre>"},{"location":"cli-help/#skaha-auth-remove-skaha-auth-rm","title":"<code>skaha auth remove</code> / <code>skaha auth rm</code>","text":"<p>Remove a specific authentication context.</p> <pre><code>skaha auth remove CONTEXT\n</code></pre> <p>Arguments: - <code>CONTEXT</code> (required): The name of the context to remove</p> <p>Permanent Action</p> <p>This action permanently removes the authentication context and cannot be undone.</p>"},{"location":"cli-help/#skaha-auth-purge","title":"<code>skaha auth purge</code>","text":"<p>Remove all authentication contexts.</p> <pre><code>skaha auth purge [OPTIONS]\n</code></pre>"},{"location":"cli-help/#options_1","title":"Options","text":"Option Description <code>--yes</code>, <code>-y</code> Skip confirmation prompt <p>Destructive Action</p> <p>This command removes ALL authentication contexts. Use with caution!</p>"},{"location":"cli-help/#session-management-commands","title":"\ud83d\ude80 Session Management Commands","text":""},{"location":"cli-help/#skaha-create","title":"<code>skaha create</code>","text":"<p>Create a new session on the Science Platform.</p> <pre><code>skaha create [OPTIONS] KIND IMAGE [-- CMD [ARGS]...]\n</code></pre> <p>Arguments: - <code>KIND</code> (required): Session type - one of: <code>desktop</code>, <code>notebook</code>, <code>carta</code>, <code>headless</code>, <code>firefly</code> - <code>IMAGE</code> (required): Container image to use - <code>CMD [ARGS]...</code> (optional): Runtime command and arguments</p>"},{"location":"cli-help/#options_2","title":"Options","text":"Option Short Type Default Description <code>--name</code> <code>-n</code> TEXT Auto-generated Name of the session <code>--cpu</code> <code>-c</code> INTEGER 1 Number of CPU cores <code>--memory</code> <code>-m</code> INTEGER 2 Amount of RAM in GB <code>--gpu</code> <code>-g</code> INTEGER None Number of GPUs <code>--env</code> <code>-e</code> TEXT None Environment variables (e.g., <code>--env KEY=VALUE</code>) <code>--replicas</code> <code>-r</code> INTEGER 1 Number of replicas to create <code>--debug</code> - Flag - Enable debug logging <code>--dry-run</code> - Flag - Perform a dry run without creating the session <p>Create a Jupyter Notebook</p> <pre><code>skaha create --cpu 4 -m 8notebook skaha/scipy-notebook:latest\n</code></pre> <p>Create a Headless Session with Custom Command</p> <pre><code>uv run skaha create headless skaha/terminal:1.1.2 -- env\n</code></pre>"},{"location":"cli-help/#skaha-ps","title":"<code>skaha ps</code>","text":"<p>Show running sessions.</p> <pre><code>skaha ps [OPTIONS]\n</code></pre>"},{"location":"cli-help/#options_3","title":"Options","text":"Option Short Type Description <code>--all</code> <code>-a</code> Flag Show all sessions (default shows just running) <code>--quiet</code> <code>-q</code> Flag Only show session IDs <code>--kind</code> <code>-k</code> Choice Filter by session kind: <code>desktop</code>, <code>notebook</code>, <code>carta</code>, <code>headless</code>, <code>firefly</code> <code>--status</code> <code>-s</code> Choice Filter by status: <code>Pending</code>, <code>Running</code>, <code>Terminating</code>, <code>Succeeded</code>, <code>Error</code> <code>--debug</code> - Flag Enable debug logging <p>List All Sessions</p> <pre><code>skaha ps --all\n</code></pre> <p>List Only Notebook Sessions</p> <pre><code>skaha ps --kind notebook\n</code></pre>"},{"location":"cli-help/#skaha-events","title":"<code>skaha events</code>","text":"<p>Show session events for debugging and monitoring.</p> <pre><code>skaha events [OPTIONS] SESSION_IDS...\n</code></pre> <p>Arguments: - <code>SESSION_IDS...</code> (required): One or more session IDs</p>"},{"location":"cli-help/#options_4","title":"Options","text":"Option Description <code>--debug</code> Enable debug logging <p>Example</p> <pre><code>skaha events abc123 def456\n</code></pre>"},{"location":"cli-help/#skaha-info","title":"<code>skaha info</code>","text":"<p>Show detailed information about sessions.</p> <pre><code>skaha info [OPTIONS] SESSION_IDS...\n</code></pre> <p>Arguments: - <code>SESSION_IDS...</code> (required): One or more session IDs</p>"},{"location":"cli-help/#options_5","title":"Options","text":"Option Description <code>--debug</code> Enable debug logging <p>Example</p> <pre><code>skaha info abc123\n</code></pre>"},{"location":"cli-help/#skaha-open","title":"<code>skaha open</code>","text":"<p>Open sessions in a web browser.</p> <pre><code>skaha open [OPTIONS] SESSION_IDS...\n</code></pre> <p>Arguments: - <code>SESSION_IDS...</code> (required): One or more session IDs</p>"},{"location":"cli-help/#options_6","title":"Options","text":"Option Description <code>--debug</code> Enable debug logging <p>Browser Integration</p> <p>This command automatically opens the session URLs in your default web browser.</p> <p>Example</p> <pre><code>skaha open abc123 def456\n</code></pre>"},{"location":"cli-help/#skaha-logs","title":"<code>skaha logs</code>","text":"<p>Show session logs for troubleshooting.</p> <pre><code>skaha logs [OPTIONS] SESSION_IDS...\n</code></pre> <p>Arguments: - <code>SESSION_IDS...</code> (required): One or more session IDs</p>"},{"location":"cli-help/#options_7","title":"Options","text":"Option Description <code>--debug</code> Enable debug logging <p>Example</p> <pre><code>skaha logs abc123\n</code></pre>"},{"location":"cli-help/#skaha-delete","title":"<code>skaha delete</code>","text":"<p>Delete one or more sessions.</p> <pre><code>skaha delete [OPTIONS] SESSION_IDS...\n</code></pre> <p>Arguments: - <code>SESSION_IDS...</code> (required): One or more session IDs to delete</p>"},{"location":"cli-help/#options_8","title":"Options","text":"Option Short Description <code>--force</code> <code>-f</code> Force deletion without confirmation <code>--debug</code> - Enable debug logging <p>Permanent Action</p> <p>Deleted sessions cannot be recovered. Use <code>--force</code> to skip confirmation prompts.</p> <p>Delete with Confirmation</p> <pre><code>skaha delete abc123\n</code></pre> <p>Force Delete Multiple Sessions</p> <pre><code>skaha delete abc123 def456 --force\n</code></pre>"},{"location":"cli-help/#skaha-prune","title":"<code>skaha prune</code>","text":"<p>Prune sessions by criteria for bulk cleanup.</p> <pre><code>skaha prune [OPTIONS] NAME [KIND] [STATUS]\n</code></pre> <p>Arguments: - <code>NAME</code> (required): Prefix to match session names - <code>KIND</code> (optional): Session kind - default: <code>headless</code> - <code>STATUS</code> (optional): Session status - default: <code>Succeeded</code></p>"},{"location":"cli-help/#options_9","title":"Options","text":"Option Short Description <code>--debug</code> - Enable debug logging <code>--help</code> <code>-h</code> Show help message and exit <p>Prune Completed Headless Sessions</p> <pre><code>skaha prune \"test-\" headless Running\n</code></pre> <p>Bulk Cleanup</p> <p>Use prune to clean up multiple sessions that match specific criteria, especially useful for automated workflows.</p>"},{"location":"cli-help/#cluster-information-commands","title":"\ud83d\udcca Cluster Information Commands","text":""},{"location":"cli-help/#skaha-stats","title":"<code>skaha stats</code>","text":"<p>Show cluster statistics and resource usage.</p> <pre><code>skaha stats [OPTIONS]\n</code></pre>"},{"location":"cli-help/#options_10","title":"Options","text":"Option Description <code>--debug</code> Enable debug logging <p>Example</p> <pre><code>skaha stats\n</code></pre> <p>Resource Monitoring</p> <p>This command provides insights into cluster resource usage, helping you understand available capacity.</p>"},{"location":"cli-help/#client-configuration-commands","title":"\u2699\ufe0f Client Configuration Commands","text":""},{"location":"cli-help/#skaha-config","title":"<code>skaha config</code>","text":"<p>Manage client configuration settings.</p>"},{"location":"cli-help/#skaha-config-show-skaha-config-list-skaha-config-ls","title":"<code>skaha config show</code> / <code>skaha config list</code> / <code>skaha config ls</code>","text":"<p>Display the current configuration.</p> <pre><code>skaha config show [OPTIONS]\n</code></pre> <p>Example</p> <pre><code>skaha config ls\n</code></pre>"},{"location":"cli-help/#skaha-config-path","title":"<code>skaha config path</code>","text":"<p>Display the path to the configuration file.</p> <pre><code>skaha config path [OPTIONS]\n</code></pre> <p>Example</p> <pre><code>skaha config path\n</code></pre> <p>Configuration Location</p> <p>Use this command to find where your configuration file is stored for manual editing if needed.</p>"},{"location":"cli-help/#skaha-version","title":"<code>skaha version</code>","text":"<p>View client version and system information.</p> <pre><code>skaha version [OPTIONS]\n</code></pre>"},{"location":"cli-help/#options_11","title":"Options","text":"Option Default Description <code>--debug</code> / <code>--no-debug</code> <code>--no-debug</code> Show detailed information for bug reports <p>Basic Version Info</p> <pre><code>skaha version\n</code></pre> <p>Detailed Debug Information</p> <pre><code>skaha version --debug\n</code></pre>"},{"location":"client/","title":"Skaha Client","text":"<p>The <code>skaha.client</code> module provides a comprehensive HTTP client for interacting with CANFAR Science Platform services. Built on the powerful <code>httpx</code> library, it offers both synchronous and asynchronous interfaces with advanced authentication capabilities.</p>"},{"location":"client/#features","title":"Features","text":"<p>Key Capabilities</p> <ul> <li>Multiple Authentication Methods: X.509 certificates, OIDC tokens, and bearer tokens</li> <li>Automatic SSL Configuration: Seamless certificate-based authentication</li> <li>Async/Sync Support: Both synchronous and asynchronous HTTP clients</li> <li>Connection Pooling: Optimized for concurrent requests</li> <li>Debug Logging: Comprehensive logging for troubleshooting</li> <li>Context Managers: Proper resource management</li> </ul> <p>This is a low-level client that is used by all other API clients in Skaha. It is not intended to be used directly by users, but rather as a building block for other clients and contributors.</p>"},{"location":"client/#authentication-modes","title":"Authentication Modes","text":"<p>The client supports multiple authentication modes that can be configured through the authentication system:</p>"},{"location":"client/#debug-logging","title":"Debug Logging","text":"<pre><code>import logging\n\n# Enable debug logging to see client creation details\nclient = SkahaClient(loglevel=logging.DEBUG)\n\n# This will log:\n# - Authentication mode selection\n# - SSL context creation\n# - Header generation\n# - Client configuration\n</code></pre>"},{"location":"client/#configuration","title":"Configuration","text":"<p>The client inherits from the <code>Configuration</code> class and supports all configuration options:</p> <pre><code>from skaha.client import SkahaClient\n\nclient = SkahaClient(\n    timeout=60,           # Request timeout in seconds\n    concurrency=64,       # Max concurrent connections\n    loglevel=20,         # Logging level (INFO)\n)\n</code></pre>"},{"location":"client/#authentication-expiry","title":"Authentication Expiry","text":"<p>The client provides an <code>expiry</code> property that returns the expiry time for the current authentication method:</p> <pre><code>import time\n\nclient = SkahaClient()\n\nif client.expiry:\n    time_left = client.expiry - time.time()\n    print(f\"Authentication expires in {time_left:.0f} seconds\")\nelse:\n    print(\"No expiry tracking (user-provided credentials)\")\n</code></pre> <p>Expiry Tracking</p> <p>The <code>expiry</code> property returns <code>None</code> for user-provided certificates or tokens since the client cannot track their expiry automatically.</p>"},{"location":"client/#error-handling","title":"Error Handling","text":"<p>The client includes built-in error handling for HTTP responses:</p> <pre><code>from httpx import HTTPStatusError\n\ntry:\n    response = client.client.get(\"/invalid-endpoint\")\n    response.raise_for_status()\nexcept HTTPStatusError as e:\n    print(f\"HTTP error: {e.response.status_code}\")\n</code></pre>"},{"location":"client/#api-reference","title":"API Reference","text":""},{"location":"client/#skaha.client.SkahaClient","title":"<code>skaha.client.SkahaClient</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Skaha Client for interacting with CANFAR Science Platform services (V2).</p> <p>This client uses a composition-based approach and inherits from Pydantic's BaseSettings to allow for flexible configuration via arguments, environment variables, or a configuration file.</p> <p>The client prioritizes credentials in the following order: 1.  Runtime Arguments/Environment Variables: A <code>token</code> or <code>certificate</code>     provided at instantiation (e.g., <code>SKAHA_TOKEN=\"...\"</code>). 2.  Active Configuration Context: The context specified by <code>active_context</code>     in the loaded configuration file.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If configuration is invalid.</p>"},{"location":"client/#skaha.client.SkahaClient.client","title":"<code>client: Client</code>  <code>property</code>","text":"<p>Get the synchronous HTTPx Client.</p> <p>Returns:</p> Name Type Description <code>Client</code> <code>Client</code> <p>The synchronous HTTPx client.</p>"},{"location":"client/#skaha.client.SkahaClient.asynclient","title":"<code>asynclient: AsyncClient</code>  <code>property</code>","text":"<p>Get the asynchronous HTTPx Async Client.</p>"},{"location":"client/#skaha.client.SkahaClient._get_ssl_context","title":"<code>_get_ssl_context(source: Path) -&gt; ssl.SSLContext</code>","text":"<p>Get SSL context from certificate file.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Path</code> <p>Path to the certificate file.</p> required <p>Returns:</p> Type Description <code>SSLContext</code> <p>ssl.SSLContext: SSL context.</p>"},{"location":"conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at shiny.brar@nrc-cnrc.gc.ca. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"context/","title":"Context API","text":"<p>!!! \"Overview\"     The Context API allows the user to get information about the resources available to be requested for a session on the CANFAR Science Platform. This information can be used to configure the session to request the appropriate resources for your session.</p> Get context information<pre><code>from skaha.context import Context\n\ncontext = Context()\ncontext.resources()\n</code></pre> <pre><code>{\n    \"cores\": {\n        \"default\": 1,\n        \"defaultRequest\": 1,\n        \"defaultLimit\": 16,\n        \"defaultHeadless\": 1,\n        \"options\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n    },\n    \"memoryGB\": {\n        \"default\": 2,\n        \"defaultRequest\": 4,\n        \"defaultLimit\": 192,\n        \"defaultHeadless\": 4,\n        \"options\": [1, 2, ..., 192],\n    },\n    \"gpus\": {\n        \"options\": [1, ..., 8],\n    },\n}\n</code></pre> <p>               Bases: <code>SkahaClient</code></p> <p>Skaha Context.</p> <p>Parameters:</p> Name Type Description Default <code>SkahaClient</code> <code>SkahaClient</code> <p>Configured Skaha Client.</p> required Source code in <code>skaha/context.py</code> <pre><code>class Context(SkahaClient):\n    \"\"\"Skaha Context.\n\n    Args:\n        SkahaClient (skaha.client.SkahaClient): Configured Skaha Client.\n    \"\"\"\n\n    def resources(self) -&gt; dict[str, Any]:\n        \"\"\"Get available resources from the skaha server.\n\n        Returns:\n            A dictionary of available resources.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.context import Context\n            &gt;&gt;&gt; context = Context()\n            &gt;&gt;&gt; context.resources()\n            {'cores': {\n              'default': 1,\n              'defaultRequest': 1,\n              'defaultLimit': 16,\n              'defaultHeadless': 1,\n              'options': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n              },\n             'memoryGB': {\n              'default': 2,\n              'defaultRequest': 4,\n              'defaultLimit': 192,\n              'defaultHeadless': 4,\n              'options': [1,2,4...192]\n             },\n            'gpus': {\n             'options': [1,2, ... 28]\n             }\n            }\n        \"\"\"\n        response: Response = self.client.get(url=\"context\")\n        return dict(response.json())\n</code></pre>"},{"location":"context/#skaha.context.Context.resources","title":"<code>resources()</code>","text":"<p>Get available resources from the skaha server.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A dictionary of available resources.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.context import Context\n&gt;&gt;&gt; context = Context()\n&gt;&gt;&gt; context.resources()\n{'cores': {\n  'default': 1,\n  'defaultRequest': 1,\n  'defaultLimit': 16,\n  'defaultHeadless': 1,\n  'options': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  },\n 'memoryGB': {\n  'default': 2,\n  'defaultRequest': 4,\n  'defaultLimit': 192,\n  'defaultHeadless': 4,\n  'options': [1,2,4...192]\n },\n'gpus': {\n 'options': [1,2, ... 28]\n }\n}\n</code></pre> Source code in <code>skaha/context.py</code> <pre><code>def resources(self) -&gt; dict[str, Any]:\n    \"\"\"Get available resources from the skaha server.\n\n    Returns:\n        A dictionary of available resources.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.context import Context\n        &gt;&gt;&gt; context = Context()\n        &gt;&gt;&gt; context.resources()\n        {'cores': {\n          'default': 1,\n          'defaultRequest': 1,\n          'defaultLimit': 16,\n          'defaultHeadless': 1,\n          'options': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n          },\n         'memoryGB': {\n          'default': 2,\n          'defaultRequest': 4,\n          'defaultLimit': 192,\n          'defaultHeadless': 4,\n          'options': [1,2,4...192]\n         },\n        'gpus': {\n         'options': [1,2, ... 28]\n         }\n        }\n    \"\"\"\n    response: Response = self.client.get(url=\"context\")\n    return dict(response.json())\n</code></pre>"},{"location":"contributing/","title":"Contributing to Skaha","text":"<p>Thank you for considering contributing to the Skaha project! We welcome contributions from everyone. Please follow the guidelines below to help us maintain a high-quality codebase.</p> <p>We follow the Contributor Convenant of Code of Conduct. If you wish to contribute to Skaha, please make sure to familiarize yourself with it.</p> <p>Contributions are not limited to just code. You can help us by:</p> <ul> <li>Answering questions on the Discussions board</li> <li>Improving the Documentation</li> <li>Reporting bugs and suggesting features via GitHub Issues (see our Bug Reporting Guide for detailed instructions)</li> <li>Spreading the word about Skaha</li> </ul>"},{"location":"contributing/#how-to-contribute-code","title":"How to Contribute Code","text":""},{"location":"contributing/#1-fork-the-repository","title":"1. Fork the Repository","text":"<p>Start by forking the repository on GitHub. This will create a copy of the project under your GitHub account.</p>"},{"location":"contributing/#2-clone-your-fork","title":"2. Clone Your Fork","text":"<p>Clone your forked repository to your local machine:</p> <pre><code>git clone https://github.com/your-username/skaha.git\ncd skaha\n</code></pre>"},{"location":"contributing/#3-set-up-your-development-environment","title":"3. Set Up Your Development Environment","text":"<ul> <li>Skaha uses uv for for package, project and dependency management. To install uv, please refer to the astral-uv documentation.</li> <li>You need a valid CANFAR account and access to the CANFAR Science Platform. To request access, please request an account with the Canadian Astronomy Data Centre (CADC).</li> </ul> <p>To setup the development environment, simply run:</p> <pre><code>uv python install 3.13\nuv venv --python 3.13\nuv sync --all-extras --dev\n</code></pre> <p>These commands will install the Python version, create a virtual environment, and install all dependencies required for development.</p> <p>Alternative Tooling</p> <p>While this project uses uv for dependency and virtual environment management, you are welcome to use other tools like pip, conda, or virtualenv. The <code>pyproject.toml</code> file contains all the necessary information for these tools to create a compatible environment.</p> <p>Skaha uses pre-commit to manage the development workflow. To install the pre-commit hooks, simply run:</p> <pre><code>uv run pre-commit install --hook-type commit-msg\n</code></pre>"},{"location":"contributing/#4-make-your-changes","title":"4. Make Your Changes","text":"<p>Make your changes. Please make sure to add tests for your changes if applicable.</p>"},{"location":"contributing/#5-run-the-tests","title":"5. Run the Tests","text":"<p>To run tests for Skaha, you need to have a valid CANFAR account and access to the CANFAR Science Platform. To generate a certificate, please refer to the get started section.</p> <pre><code>uv run pytest\n</code></pre>"},{"location":"contributing/#running-tests-efficiently","title":"Running Tests Efficiently","text":"<p>Some tests in the Skaha test suite are marked as \"slow\" because they involve network operations, waiting for session states, or other time-consuming operations. These tests can take several minutes to complete.</p> <p>Run all tests (including slow ones): <pre><code>uv run pytest\n</code></pre></p> <p>Skip slow tests for faster development: <pre><code>uv run pytest -m \"not slow\"\n</code></pre></p> <p>Run only slow tests: <pre><code>uv run pytest -m \"slow\"\n</code></pre></p> <p>The slow tests are primarily integration tests that interact with the CANFAR Science Platform and include: - Session creation and management tests - Log retrieval tests - Authentication timeout tests - Session statistics tests</p> <p>For rapid development and testing, it's recommended to use <code>-m \"not slow\"</code> to skip these time-consuming tests during your development cycle, and run the full test suite before submitting your pull request.</p>"},{"location":"contributing/#6-commit-your-changes","title":"6. Commit Your Changes","text":"<p>Skaha uses the conventional commit messages standard to ensure the commit history human and machine readable. Skaha ships with a tool called <code>commitizen</code> that helps you craft commit messages in the correct format.</p> <pre><code>git add files/you/changed.py\nuv run cz commit\n</code></pre> <p>At this point, you will also see pre-commit hooks running to check your code for any issues and ensure that the code is linted and formatted correctly.</p>"},{"location":"contributing/#7-push-changes-to-your-fork","title":"7. Push Changes to Your Fork","text":"<p>Push your changes to your forked repository:</p> <pre><code>git push\n</code></pre>"},{"location":"contributing/#8-create-a-pull-request","title":"8. Create a Pull Request","text":"<p>Once your changes are pushed to your fork, you can create a pull request from your forked repository to the main Skaha repository. The maintainers will review your changes and merge them if everything is in order.</p>"},{"location":"contributing/#9-celebrate","title":"9. Celebrate","text":"<p>Congratulations! You've made it through the contribution process! Now it's time to celebrate your hard work. Here are a few fun ways to do so:</p> <ul> <li>Dance Party: Put on your favorite tunes and have a solo dance party in your living room. Bonus points for using a disco ball!</li> <li>Snack Attack: Treat yourself to your favorite snack. Whether it's pizza, ice cream, or a healthy smoothie, you deserve it!</li> <li>Virtual High-Five: Send a virtual high-five to your fellow contributors. You can even use a GIF for extra flair!</li> <li>Meme It Up: Create a meme about your contribution journey. Share it in the Discussions board for a good laugh!</li> <li>Celebrate with Code: Write a fun piece of code that does absolutely nothing but prints \"I did it!\" to the console. Because why not?</li> </ul> <p>Remember, every contribution counts, and you\u2019ve just made the Skaha project a little better. Now go forth and celebrate like the coding rockstar you are!</p>"},{"location":"examples/","title":"Skaha Usage Examples","text":""},{"location":"examples/#creating-a-session","title":"Creating a Session","text":"Create a session<pre><code>from skaha.session import Session\n\nsession = Session()\nsession_ids = session.create(\n    name=\"test\",\n    image=\"images.canfar.net/skaha/terminal:1.1.1\",\n    cores=2,\n    ram=8,\n    kind=\"headless\",\n    cmd=\"env\",\n    env={\"TEST\": \"test\"},\n    replicas=3,\n)\n</code></pre> <p>This will create three headless containers, each with 2 cores and 8GB of RAM, and run the command <code>env</code> in each container. The environment variable <code>TEST</code> will be set to <code>test</code> in each container. The response will be a list of session IDs created.</p> <pre><code>print(session_ids)\n[\"mrjdtbn9\", \"ov6doae7\", \"g9b4p1p4\"]\n</code></pre> <p>Container Replicas</p> <p>When spawning sessions with the Skaha API, it adds two additional environment variables to each container:</p> <ul> <li><code>REPLICA_COUNT</code>: An integer representing the total number of replicas spawned, e.g. 3 for the example above.</li> <li><code>REPLICA_ID</code>: An integer representing the unique ID of the replica using 1-based indexing, e.g. 1, 2, 3 for the example above.</li> </ul> <p>These environment variables can be used to configure your application to run in a distributed manner. The Skaha distributed helpers (<code>chunk</code> and <code>stripe</code>) automatically handle the conversion from 1-based REPLICA_ID values to appropriate data partitioning. For example, you can use the <code>REPLICA_COUNT</code> to configure the number of workers and the <code>REPLICA_ID</code> to configure the rank of the worker.</p> <p>Private Container Registry Access</p> <p>If you are using a private container image from the CANFAR Harbor Registry, you need to provide your harbor <code>username</code> and the <code>CLI Secret</code> through a <code>ContainerRegistry</code> object. <pre><code>from skaha.models import ContainerRegistry\nfrom skaha.session import Session\n\nregistry = ContainerRegistry(username=\"username\", password=\"sUp3rS3cr3t\")\nsession = Session(registry=registry)\n</code></pre></p>"},{"location":"examples/#getting-session-information","title":"Getting Session Information","text":"Get session information<pre><code>session.info(session_id)\n</code></pre> Session Information<pre><code>[{'id': 'g9b4p1p4',\n  'userid': 'brars',\n  'runAsUID': '166169204',\n  'runAsGID': '166169204',\n  'supplementalGroups': [34241, 34337, 35124, 36227, 1454823273, 1025424273],\n  'appid': '&lt;none&gt;',\n  'image': 'images.canfar.net/skaha/terminal:1.1.1',\n  'type': 'headless',\n  'status': 'Pending',\n  'name': '2a74d03-1',\n  'startTime': '2024-10-21T21:39:01Z',\n  'expiryTime': '2024-11-04T21:39:01Z',\n  'connectURL': 'not-applicable',\n  'requestedRAM': '1G',\n  'requestedCPUCores': '1',\n  'requestedGPUCores': '0',\n  'ramInUse': '&lt;none&gt;',\n  'gpuRAMInUse': '&lt;none&gt;',\n  'cpuCoresInUse': '&lt;none&gt;',\n  'gpuUtilization': '&lt;none&gt;'}]\n</code></pre>"},{"location":"examples/#getting-deployment-information","title":"Getting Deployment Information","text":"<p>Deployment information, about that events that occurred during the deployment of a session, can be retrieved using the <code>events</code> method.</p> Get deployment information<pre><code>events = session.events(session_ids, verbose=True)\n</code></pre> <pre><code>TYPE     REASON      MESSAGE                                                                                              FIRST-TIME             LAST-TIME\nNormal   Scheduled   Successfully assigned skaha-workload/skaha-headless-user-gvfusmzo-kdqkz to keel-prod-k8s-node-x04   &lt;nil&gt;                  &lt;nil&gt;\nNormal   Pulled      Container image \"images.canfar.net/skaha/terminal:1.1.1\" already present on machine                  2025-05-27T22:02:08Z   2025-05-27T22:02:08Z\nNormal   Created     Created container backup-original-passwd-groups                                                      2025-05-27T22:02:08Z   2025-05-27T22:02:08Z\nNormal   Started     Started container backup-original-passwd-groups                                                      2025-05-27T22:02:10Z   2025-05-27T22:02:10Z\nNormal   Pulled      Container image \"redis:7.4.2-alpine3.21\" already present on machine                                  2025-05-27T22:02:11Z   2025-05-27T22:02:11Z\nNormal   Created     Created container init-users-groups                                                                  2025-05-27T22:02:11Z   2025-05-27T22:02:11Z\nNormal   Started     Started container init-users-groups                                                                  2025-05-27T22:02:12Z   2025-05-27T22:02:12Z\nNormal   Pulled      Container image \"images.canfar.net/skaha/terminal:1.1.1\" already present on machine                  2025-05-27T22:02:14Z   2025-05-27T22:02:14Z\nNormal   Created     Created container skaha-headless-user-gvfusmzo                                                      2025-05-27T22:02:14Z   2025-05-27T22:02:14Z\nNormal   Started     Started container skaha-headless-user-gvfusmzo\n</code></pre>"},{"location":"examples/#getting-session-logs","title":"Getting Session Logs","text":"<p>To get the logs of a session, you can use the <code>logs</code> method. The response will be a dictionary with the session IDs as keys and the logs as values. The logs are plain text format and can be printed to the console.</p> Get session logs<pre><code>session.logs(session_ids)\n</code></pre>"},{"location":"examples/#destroying-a-session","title":"Destroying a Session","text":"<p>When you are done with your session, you can destroy it using the <code>destroy</code> method. The response will be a dictionary with the session IDs as keys and a boolean value indicating whether the session was destroyed or not.</p> Destroy a session<pre><code>session.destroy(session_ids)\n</code></pre> <pre><code>{\"mrjdtbn9\": True, \"ov6doae7\": True, \"ayv4553m\": True}\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>Common questions and answers about using Skaha with the CANFAR Science Platform.</p>"},{"location":"faq/#getting-started","title":"Getting Started","text":""},{"location":"faq/#what-is-the-canfar-science-platform","title":"What is the CANFAR Science Platform?","text":"<p>The CANFAR Science Platform is a national cloud computing infrastructure for astronomy research. It allows you to launch Jupyter notebooks, desktop applications, and batch processing jobs in the cloud.</p>"},{"location":"faq/#do-i-need-a-cadc-account","title":"Do I need a CADC account?","text":"<p>Yes, you need a Canadian Astronomy Data Centre (CADC) account to use the Science Platform. You can request an account here.</p>"},{"location":"faq/#how-much-does-it-cost","title":"How much does it cost?","text":"<p>The CANFAR Science Platform access is free for Canadian astronomers and their international collaborators. Resource usage is subject to fair-use policies and allocation limits. If you require significantly more resources, you can request additional resources through the Digital Research Alliance of Canada (DRAC) Resource Allocation Competition and they can be used on the CANFAR Science Platform.</p>"},{"location":"faq/#whats-the-difference-between-the-science-platform-and-other-cloud-platforms","title":"What's the difference between the Science Platform and other cloud platforms?","text":"<p>The Science Platform is specifically designed for astronomy research with: - Hundreds of community contributed and staff maintained container images - Support for availaible astronomy software (Firefly, CARTA, etc.) - Direct access to 6PB+ of CADC data archives - No setup or configuration required - Co-located with with Canadian Astronomy Infrastructure, e.g. YouCat, CAOM, DOI, Vault Storage, etc.</p>"},{"location":"faq/#authentication","title":"Authentication","text":""},{"location":"faq/#how-do-i-get-authenticated","title":"How do I get authenticated?","text":"<p>Use X.509 certificates (recommended for most users):</p> <p><pre><code>cadc-get-cert -u your-username\n</code></pre> or  <pre><code>skaha auth login\n</code></pre> Choose CANFAR CADC Server<pre><code>Starting Science Platform Login\nFetched CADC in 0.14s\nFetched SRCnet in 1.09s\nDiscovery completed in 4.62s (6/18 active)\n? Select a Skaha Server: (Use arrow keys)\n   \ud83d\udfe2 Canada  SRCnet\n   \ud83d\udfe2 UK-CAM  SRCnet\n   \ud83d\udfe2 Swiss   SRCnet\n   \ud83d\udfe2 Italy   SRCnet\n \u00bb \ud83d\udfe2 CANFAR  CADC\n</code></pre></p> <p>Certificates are valid for 10 days and need to be renewed regularly.</p>"},{"location":"faq/#can-i-use-oidc-tokens-instead-of-certificates","title":"Can I use OIDC tokens instead of certificates?","text":"<p>Yes, OIDC (OpenID Connect) tokens are supported for advanced users and programmatic access accessing the Science Platform through the Square Kilometer Array (SKA) Science Regional Network (SRCNet). To setup OIDC authentication, use</p> <p><pre><code>skaha auth login\n</code></pre> Choose SRCNet Server<pre><code>Starting Science Platform Login\nFetched CADC in 0.14s\nFetched SRCnet in 1.09s\nDiscovery completed in 4.62s (6/18 active)\n? Select a Skaha Server: (Use arrow keys)\n \u00bb \ud83d\udfe2 Canada  SRCnet\n   \ud83d\udfe2 UK-CAM  SRCnet\n   \ud83d\udfe2 Swiss   SRCnet\n   \ud83d\udfe2 Italy   SRCnet\n   \ud83d\udfe2 CANFAR  CADC\n</code></pre></p>"},{"location":"faq/#sessions-and-resources","title":"Sessions and Resources","text":""},{"location":"faq/#what-session-types-are-available","title":"What session types are available?","text":"<ul> <li>Notebook: Interactive Jupyter Lab environment</li> <li>Desktop: Full Linux desktop with GUI applications</li> <li>Headless: Command-line only for batch processing</li> <li>Firefly: Advanced image visualization tool</li> <li>CARTA: Image visualization tool</li> </ul> <p>See the Session Types Guide for detailed information.</p>"},{"location":"faq/#how-much-cpu-and-ram-can-i-request","title":"How much CPU and RAM can I request?","text":"<p>Limits vary based on the underlying hardware and current load on the system. You can see the current statistics with,</p> <pre><code>skaha stats\n</code></pre>"},{"location":"faq/#how-long-do-sessions-run","title":"How long do sessions run?","text":"<p>Sessions run until,   - You destroy the session.   - The session reaches a natural termination point (e.g. batch job completes).   - The session exceeds the maximum runtime (typically 30 days).</p> <p>In very rare cases, sessions may be terminated early if, - Resources are needed for higher-priority work - System maintenance is required - Fair-use policies are misused</p>"},{"location":"faq/#why-is-my-session-stuck-in-pending","title":"Why is my session stuck in \"Pending\"?","text":"<p>Common causes: - Insufficient resources available to fulfill request - Image not found or inaccessible - Resource quota exceeded - System maintenance</p> <p>You can check the events for a session to see the pending reason with, <pre><code>skaha events &lt;session-id&gt;\n</code></pre></p>"},{"location":"faq/#images-and-software","title":"Images and Software","text":""},{"location":"faq/#can-i-use-my-own-container-images","title":"Can I use my own container images?","text":"<p>Yes, you can use: - Public images: Any publicly accessible container - Private images: From CANFAR Harbor registry (requires credentials) - Custom images: Build and push to CANFAR Harbor</p>"},{"location":"faq/#data-access","title":"Data Access","text":""},{"location":"faq/#how-do-i-access-my-data","title":"How do I access my data?","text":"<p>Your data is available in several locations: - Home directory: <code>/arc/home/username/</code> (persistent, slow storage) - Shared data: <code>/arc/projects/project-name/</code> (project-specific storage) - Scratch space: <code>/scratch/</code> (temporary, high-performance)</p>"},{"location":"faq/#performance-and-optimization","title":"Performance and Optimization","text":""},{"location":"faq/#can-i-run-multiple-sessions-simultaneously","title":"Can I run multiple sessions simultaneously?","text":"<p>Yes, you can run multiple sessions simultaneously with upto 3 Notebook sessions, 1 Desktop session, and <code>unlimited</code> Headless session.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#i-cant-connect-to-my-session-url-help","title":"I can't connect to my session URL. Help!","text":"<p>Troubleshooting steps: 1. Wait for \"Running\" status: Check <code>skaha ps</code> 2. Check VPN: Some VPNs block CANFAR connections 3. Try different browser: Clear cache or use incognito mode</p>"},{"location":"faq/#how-do-i-get-help-with-errors","title":"How do I get help with errors?","text":"<ol> <li>Check this FAQ</li> <li>Search GitHub issues: github.com/shinybrar/skaha/issues</li> <li>Ask the Community: Discord Server</li> </ol>"},{"location":"faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"faq/#can-i-automate-session-management","title":"Can I automate session management?","text":"<p>Yes, Skaha is designed for automation: <pre><code># Automated workflow\nsession = Session()\nsession_id = session.create(name=\"automated\", kind=\"headless\", cmd=\"python\", args=[\"script.py\"])\n\n# Monitor until completion\nwhile session.info(session_id)[0]['status'] != 'Completed':\n    time.sleep(60)\n\n# Get results and cleanup\nsession.logs([session_id])\nsession.destroy([session_id])\n</code></pre></p>"},{"location":"faq/#policies-and-limits","title":"Policies and Limits","text":""},{"location":"faq/#what-are-the-fair-use-policies","title":"What are the fair-use policies?","text":"<ul> <li>Resource sharing: Don't monopolize resources unnecessarily</li> <li>Session cleanup: Destroy sessions when finished</li> <li>Appropriate use: Use for astronomy research and education</li> <li>Data management: Don't store unnecessary data long-term</li> </ul>"},{"location":"faq/#are-there-usage-quotas","title":"Are there usage quotas?","text":"<p>Yes, quotas vary by user and allocation, but generally there are quotas on: - Concurrent sessions: Hard limits on notebooks, desktop, firefly, and carta and no limit on headless - Total resources: No hard limits, but fair-use applies - Storage: Hard limits on <code>/arc</code> and <code>/arc/projects</code> - Time limits: No hard limits, but fair-use applies</p>"},{"location":"faq/#getting-help","title":"Getting Help","text":""},{"location":"faq/#how-do-i-report-bugs-or-request-features","title":"How do I report bugs or request features?","text":"<ul> <li>Bugs: Report on GitHub</li> <li>Feature requests: GitHub Discussions</li> <li>Security issues: Security reporting</li> </ul>"},{"location":"faq/#is-there-a-user-community","title":"Is there a user community?","text":"<p>Yes! Join the community: - GitHub Discussions: Ask questions and share experiences - CANFAR Forums: Official CANFAR community forums - Workshops: Regular training workshops and webinars - Documentation: Contribute to documentation improvements</p> <p>Didn't find your answer?</p> <p>Check the troubleshooting guide or ask the community on GitHub Discussions.</p>"},{"location":"get-started/","title":"Installation &amp; Setup","text":"<p>This guide covers everything you need to install and configure Skaha for use with Science Platform servers worldwide.</p> <p>New to Skaha?</p> <p>If you want to jump right in with a hands-on tutorial, check out our 5-Minute Quick Start guide first!</p>"},{"location":"get-started/#prerequisites","title":"Prerequisites","text":"<p>Before you can use Skaha, you need:</p> <ul> <li>Python 3.10+ installed on your system</li> <li>A Science Platform account - For CANFAR, request an account with CADC</li> </ul>"},{"location":"get-started/#installation","title":"Installation","text":"<p>Install Skaha using <code>pip</code>:</p> <pre><code>pip install skaha --upgrade\n</code></pre> <p>Virtual Environments</p> <p>We recommend using a virtual environment to avoid conflicts with other packages: <pre><code>python -m venv skaha-env\nsource skaha-env/bin/activate  # On Windows: skaha-env\\Scripts\\activate\npip install skaha\n</code></pre></p>"},{"location":"get-started/#authentication-setup","title":"Authentication Setup","text":"<p>Skaha uses an authentication context system to manage connections to multiple Science Platform servers. The easiest way to get started is with the CLI login command.</p>"},{"location":"get-started/#quick-authentication","title":"Quick Authentication","text":"<p>To authenticate with a Science Platform server:</p> <pre><code>skaha auth login\n</code></pre> <p>This command will:</p> <ol> <li>Discover available servers worldwide</li> <li>Guide you through server selection</li> <li>Handle the authentication process (X.509 or OIDC)</li> <li>Save your credentials for future use</li> </ol> <p>Example Login Flow</p> <pre><code>$ skaha auth login\nStarting Science Platform Login\nDiscovery completed in 2.1s (5/18 active)\n\nSelect a Skaha Server:\n\u00bb \ud83d\udfe2 CANFAR  CADC\n  \ud83d\udfe2 Canada  SRCnet\n  \ud83d\udfe2 UK-CAM  SRCnet\n\nX509 Certificate Authentication\nUsername: your-username\nPassword: ***********\n\u2713 Login completed successfully!\n</code></pre>"},{"location":"get-started/#using-skaha-programmatically","title":"Using Skaha Programmatically","text":"<p>Once authenticated via CLI, you can use Skaha in your Python code:</p> <pre><code>from skaha.session import Session\nfrom skaha.images import Images\n\n# Uses your active authentication context\nsession = Session()\nimages = Images()\n\n# List available images\ncontainer_images = images.fetch()\nprint(f\"Found {len(container_images)} container images\")\n\n# Create a notebook session\nsession_info = session.create(\n    kind=\"notebook\",\n    image=\"images.canfar.net/skaha/base-notebook:latest\",\n    name=\"my-analysis\",\n    cores=2,\n    ram=4\n)\nprint(f\"Created session: {session_info.id}\")\n</code></pre>"},{"location":"get-started/#private-container-images","title":"Private Container Images","text":"<p>To access private container images from registries like CANFAR Harbor, provide registry credentials:</p> <pre><code>from skaha.models import ContainerRegistry\nfrom skaha.session import Session\n\n# Configure registry access\nregistry = ContainerRegistry(\n    username=\"your-username\",\n    password=\"**************\"\n)\n\n# Use with session\nsession = Session(registry=registry)\n\n# Now you can use private images\nsession_info = session.create(\n    kind=\"notebook\",\n    image=\"images.canfar.net/private/my-image:latest\",\n    cores=1,\n    ram=2\n)\n</code></pre> <p>Registry Credentials</p> <p>The registry credentials are base64 encoded and passed to the server via the <code>X-Skaha-Registry-Auth</code> header.</p>"},{"location":"get-started/#next-steps","title":"Next Steps","text":"<p>Now that you have Skaha installed and configured:</p> <ul> <li> Try our 5-Minute Quick Start for a hands-on introduction to creating and managing sessions.</li> <li> Learn about Authentication Contexts for managing multiple servers and advanced authentication scenarios.</li> <li> Explore Basic Examples and Advanced Examples for common use cases.</li> <li> Check out the Python API Reference for detailed documentation of all available methods.</li> <li> Refer to the FAQ for answers to common questions.</li> </ul> <p>Getting Help</p> <ul> <li>\ud83d\udcd6 Complete CLI Reference</li> <li>\ud83d\udcac Community Discussions</li> <li>\ud83d\udc1b Report Issues</li> </ul>"},{"location":"images/","title":"Images API","text":"<p>Overview</p> <p>The Image API allows you to get information about the publicly available images on the CANFAR Science Platform through the CANFAR Harbor Registry. It can be used to get information about all images, or filter by a specific image kind.</p>"},{"location":"images/#getting-image-information","title":"Getting Image Information","text":"Get image information<pre><code>from skaha.images import Images\n\nimages = Images()\nimages.fetch()\n[\n    \"images.canfar.net/canfar/base-3.12:v0.4.1\",\n    \"images.canfar.net/canucs/test:1.2.5\",\n    \"images.canfar.net/canucs/canucs:1.2.9\",\n    ...,\n]\n</code></pre> <p>But most of the time, you are only interested in images of a particular type. For example, if you want to get all the images that are available for <code>headless</code> sessions, you can do the following:</p> Get headless image information<pre><code>images.fetch(kind=\"headless\")\n</code></pre> <pre><code>[\n    \"images.canfar.net/chimefrb/testing:keep\",\n    \"images.canfar.net/lsst/lsst_v19_0_0:0.1\",\n    \"images.canfar.net/skaha/lensfit:22.11\",\n    \"images.canfar.net/skaha/lensfit:22.10\",\n    \"images.canfar.net/skaha/lensingsim:22.07\",\n    \"images.canfar.net/skaha/phosim:5.6.11\",\n    \"images.canfar.net/skaha/terminal:1.1.2\",\n    \"images.canfar.net/skaha/terminal:1.1.1\",\n    \"images.canfar.net/uvickbos/pycharm:0.1\",\n    \"images.canfar.net/uvickbos/swarp:0.1\",\n    \"images.canfar.net/uvickbos/isis:2.2\",\n    \"images.canfar.net/uvickbos/find_moving:0.1\",\n]\n</code></pre>"},{"location":"images/#api-reference","title":"API Reference","text":"<p>               Bases: <code>SkahaClient</code></p> <p>Skaha Image Management.</p> <p>Parameters:</p> Name Type Description Default <code>SkahaClient</code> <code>SkahaClient</code> <p>Configured Skaha Client.</p> required <p>Returns:</p> Name Type Description <code>Images</code> <p>Skaha Image Management Object.</p> Source code in <code>skaha/images.py</code> <pre><code>class Images(SkahaClient):\n    \"\"\"Skaha Image Management.\n\n    Args:\n        SkahaClient (skaha.client.SkahaClient): Configured Skaha Client.\n\n    Returns:\n        Images: Skaha Image Management Object.\n    \"\"\"\n\n    def fetch(self, kind: str | None = None) -&gt; list[str]:\n        \"\"\"Get images from Skaha Server.\n\n        Args:\n            kind (str | None, optional): Type of image. Defaults to None.\n\n        Returns:\n            list[str]: A list of images on the skaha server.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.images import Images\n            &gt;&gt;&gt; images = Images()\n            &gt;&gt;&gt; images.fetch(kind=\"headless\")\n            ['images.canfar.net/skaha/terminal:1.1.1']\n        \"\"\"\n        data: dict[str, str] = {}\n        # If kind is not None, add it to the data dictionary\n        if kind:\n            data[\"type\"] = kind\n        response: Response = self.client.get(\"image\", params=data)\n        payload: list[dict[str, str]] = response.json()\n        return [str(image[\"id\"]) for image in payload]\n</code></pre>"},{"location":"images/#skaha.images.Images.fetch","title":"<code>fetch(kind=None)</code>","text":"<p>Get images from Skaha Server.</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>str | None</code> <p>Type of image. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of images on the skaha server.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.images import Images\n&gt;&gt;&gt; images = Images()\n&gt;&gt;&gt; images.fetch(kind=\"headless\")\n['images.canfar.net/skaha/terminal:1.1.1']\n</code></pre> Source code in <code>skaha/images.py</code> <pre><code>def fetch(self, kind: str | None = None) -&gt; list[str]:\n    \"\"\"Get images from Skaha Server.\n\n    Args:\n        kind (str | None, optional): Type of image. Defaults to None.\n\n    Returns:\n        list[str]: A list of images on the skaha server.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.images import Images\n        &gt;&gt;&gt; images = Images()\n        &gt;&gt;&gt; images.fetch(kind=\"headless\")\n        ['images.canfar.net/skaha/terminal:1.1.1']\n    \"\"\"\n    data: dict[str, str] = {}\n    # If kind is not None, add it to the data dictionary\n    if kind:\n        data[\"type\"] = kind\n    response: Response = self.client.get(\"image\", params=data)\n    payload: list[dict[str, str]] = response.json()\n    return [str(image[\"id\"]) for image in payload]\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate.  Many developers of free software are heartened and encouraged by the resulting cooperation.  However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community.  It requires the operator of a network server to provide the source code of the modified version running there to the users of that server.  Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals.  This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Remote Network Interaction; Use with the GNU General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.  This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source.  For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code.  There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"overview/","title":"Overview","text":"<p>Overview API</p> <p>The Overview API provides information about the availability of the CANFAR Science Platform.</p> <p>               Bases: <code>SkahaClient</code></p> <p>Overview of the Skaha Server.</p> <p>Parameters:</p> Name Type Description Default <code>SkahaClient</code> <code>Object</code> <p>Skaha Client.</p> required Source code in <code>skaha/overview.py</code> <pre><code>class Overview(SkahaClient):\n    \"\"\"Overview of the Skaha Server.\n\n    Args:\n        SkahaClient (Object): Skaha Client.\n    \"\"\"\n\n    @model_validator(mode=\"after\")\n    def _update_base_url(self) -&gt; Self:\n        \"\"\"Update base URL for the server.\n\n        Returns:\n            Self: The current object.\n        \"\"\"\n        url: str = str(self.client.base_url)\n        base: str = url.split(\"/v\", maxsplit=1)[0]\n        # The overview endpoint is not versioned, so need to remove it\n        self.client.base_url = URL(base)\n        self.asynclient.base_url = URL(base)\n        return self\n\n    def availability(self) -&gt; bool:\n        \"\"\"Check if the server backend is available.\n\n        Returns:\n            bool: True if the server is available, False otherwise.\n        \"\"\"\n        response: Response = self.client.get(\"availability\")\n        data: str = response.text\n        if not data:\n            log.error(\"No data returned from availability endpoint.\")\n            return False\n        root = ElementTree.fromstring(data)\n        available = root.find(\n            \".//{http://www.ivoa.net/xml/VOSIAvailability/v1.0}available\",\n        )\n        availaibility: str | None = available.text if available is not None else None\n\n        note = root.find(\n            \".//{http://www.ivoa.net/xml/VOSIAvailability/v1.0}note\",\n        )\n        notify: str | None = note.text if note is not None else None\n        if availaibility is None:\n            log.error(\"No availability information found in the response.\")\n            return False\n        log.info(notify if notify else \"No additional information provided.\")\n        return availaibility == \"true\"\n</code></pre>"},{"location":"overview/#skaha.overview.Overview.availability","title":"<code>availability()</code>","text":"<p>Check if the server backend is available.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the server is available, False otherwise.</p> Source code in <code>skaha/overview.py</code> <pre><code>def availability(self) -&gt; bool:\n    \"\"\"Check if the server backend is available.\n\n    Returns:\n        bool: True if the server is available, False otherwise.\n    \"\"\"\n    response: Response = self.client.get(\"availability\")\n    data: str = response.text\n    if not data:\n        log.error(\"No data returned from availability endpoint.\")\n        return False\n    root = ElementTree.fromstring(data)\n    available = root.find(\n        \".//{http://www.ivoa.net/xml/VOSIAvailability/v1.0}available\",\n    )\n    availaibility: str | None = available.text if available is not None else None\n\n    note = root.find(\n        \".//{http://www.ivoa.net/xml/VOSIAvailability/v1.0}note\",\n    )\n    notify: str | None = note.text if note is not None else None\n    if availaibility is None:\n        log.error(\"No availability information found in the response.\")\n        return False\n    log.info(notify if notify else \"No additional information provided.\")\n    return availaibility == \"true\"\n</code></pre>"},{"location":"quick-start/","title":"5-Minute Quick Start","text":"<p>Goal</p> <p>By the end of this guide, you'll have a Jupyter Notebook running on CANFAR with astronomy tools ready to use.</p> <p>Prerequisites</p> <ul> <li>A CADC Account (Canadian Astronomy Data Centre) - Sign up here</li> <li>Logged into the CANFAR Science Platform and Harbor Container Registry at least once.</li> <li>Python 3.10+</li> <li>Basic familiarity with Python and Jupyter notebooks</li> </ul>"},{"location":"quick-start/#installation","title":"Installation","text":"&gt; pip install skaha --upgradeInstalled"},{"location":"quick-start/#authentication","title":"Authentication","text":"skaha auth loginStarting Science Platform LoginFetched CADC in 0.12sFetched SRCnet in 1.15sDiscovery completed in 3.32s (5/18 active)Select a Skaha Server: (Use arrow keys)   \ud83d\udfe2 Canada  SRCnet   \ud83d\udfe2 UK-CAM  SRCnet   \ud83d\udfe2 Swiss   SRCnet   \ud83d\udfe2 Spain   SRCnet \u00bb \ud83d\udfe2 CANFAR  CADCSelected a Skaha Server: \ud83d\udfe2 CANFAR  CADCX509 Certificate AuthenticationUsername: usernameusername@ws.cadc-ccda.hia-iha.nrc-cnrc.gc.caPassword: ***********\u2713 Saving configurationLogin completed successfully! <p>What just happened?</p> <ul> <li>Skaha discovered all available Science Platform servers around the world</li> <li>You selected the CADC CANFAR Server</li> <li>You logged into the Science Platform using your CADC credentials</li> <li>The Science Platform generated a certificate for you valid for 10 days</li> <li>The certificate is Stored in <code>~/.ssl/cadcproxy.pem</code></li> </ul>"},{"location":"quick-start/#launch-your-first-notebook","title":"Launch Your First Notebook","text":"<p>Lets launch a Jupyter notebook with astronomy tools pre-installed, </p> skaha create notebook skaha/astroml-notebook:latestCreating notebook session 'scare-monster'...Successfully created session 'scare-monster' (ID: tcgle3m3) <p>What just happened?</p> <ul> <li>Skaha connected to CANFAR using your certificate</li> <li>Skaha defaulted the container image to <code>images.canfar.net/skaha/astroml-notebook:latest</code></li> <li>A Jupyter notebook was launched with the container image</li> <li>A random name was generated for your session, <code>scare-monster</code> in this case</li> <li>The Science Platform allocated resources for your notebook and started it.</li> </ul>"},{"location":"quick-start/#peek-under-the-hood","title":"Peek Under the Hood","text":"skaha events $(skaha ps -q) <p>What just happened?</p> <ul> <li>Skaha connected to CANFAR using your certificate</li> <li>We queried the Science Platform for all running sessions via <code>skaha ps -q</code></li> <li>We fetched the events (actions performed by the Science Platform to start your session) for your session</li> <li>The events show the progress of your session being created</li> </ul>"},{"location":"quick-start/#check-status","title":"Check Status","text":"skaha ps                                           Skaha Sessions                                              SESSION ID NAME          KIND     STATUS  IMAGE                                           CREATED    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  tcgle3m3   scare-monster notebook Running images.canfar.net/skaha/astroml-notebook:latest 2 minutes  <p>What just happened?</p> <ul> <li>Skaha connected to CANFAR using your certificate</li> <li>The status of your session was checked</li> <li>The session is in <code>Running</code> state, ready to use</li> </ul>"},{"location":"quick-start/#get-session-information","title":"Get Session Information","text":"skaha info $(skaha ps -q)                                         Skaha Session Info for tcgle3m3  Session ID    zkm7yly7  Name          alert-connect  Status        Running  Type          notebook  Image         images.canfar.net/skaha/astroml-notebook:latest  User ID       brars  Start Time    12 seconds ago  Expiry Time   3 days and 24.00 hours  Connect URL   https://workload-uv.canfar.net/session/notebook/redacted  UID           12345  GID           12345  Groups        [54321, 54312, 54123, 51234, 12345]  App ID        &lt;none&gt;  CPU Usage     0% of 1 core(s)  RAM Usage     0% of 2G GB  GPU Usage     Not Requested <p>What just happened?</p> <ul> <li>Skaha connected to CANFAR using your certificate</li> <li>The information for your session was fetched</li> <li>When we created a your session, we never specified a name, cpu or memory, so the default values were used</li> <li>The default values are 1 core, 2GB of RAM, and 4 days of lifetime</li> </ul>"},{"location":"quick-start/#access-your-notebook","title":"Access Your Notebook","text":"<p>Check the status and get the URL to access your notebook:</p> skaha open $(skaha ps -q)Opening session tcgle3m3 in a new tab. <p>What just happened?</p> <ul> <li>Skaha connected to CANFAR using your certificate</li> <li><code>skaha ps -q</code> returns only the session ID of your session</li> <li>Your browser opened the notebook in a new tab</li> </ul> <p>Pro Tip</p> <p>The notebook usually takes 60-120 seconds to start. You can also check status from the command line:</p>"},{"location":"quick-start/#start-analyzing","title":"Start Analyzing!","text":"<p>Once your notebook is running, click the URL to open it in your browser. You'll have access to:</p> <ul> <li>Jupyter Lab with a full Python environment</li> <li>Pre-installed astronomy libraries: AstroPy, Matplotlib, SciPy, PyTorch, etc.</li> <li>Persistent storage: Your work is automatically saved at <code>/arc/home/username/</code></li> <li>Ephemeral storage: For temporary data staging, use <code>/scratch/</code></li> </ul> <p>Try This First</p> <p>In JupyterLab, open a new Notebook and run the following code to verify your environment:</p> <pre><code>import astropy\nfrom astropy.io import fits\nimport matplotlib\nimport numpy as np\n\nprint(f\"AstroPy version: {astropy.__version__}\")\nprint(f\"Matplotlib version: {matplotlib.__version__}\")\nprint(f\"Numpy version: {np.__version__}\")\nprint(f\"GPU available: {torch.cuda.is_available()}\")\nprint(\"Ready for astronomy!\")\n</code></pre>"},{"location":"quick-start/#clean-up","title":"Clean Up","text":"<p>When you're done, clean up your session to free up resources for others:</p> skaha delete $(skaha ps -q)Confirm deletion of 1 session(s)? [y/n] (n): ySuccessfully deleted {'tcgle3m3': True} session(s)."},{"location":"quick-start/#congratulations","title":"Congratulations!","text":"<p>You now have a fully-equipped astronomy computing environment running in the cloud. No software installation, no environment conflicts, no waiting for local resources.</p>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"\u26a1 Scale Your Analysis <ul> <li>Massively Parallel Processing</li> </ul> \ud83d\udee0\ufe0f Advanced Setup <ul> <li>Authentication Contexts</li> <li>Session Types Guide</li> </ul>"},{"location":"quick-start/#troubleshooting","title":"Troubleshooting","text":"<p>Common Issues</p> <ul> <li>Notebook won't start?<ul> <li>Check available resources: <code>skaha stats</code></li> <li>Try a smaller configuration (fewer cores/RAM)</li> <li>Check session status: <code>skaha ps</code></li> </ul> </li> <li>Can't access notebook URL?</li> <li>Wait 1-2 minutes for full startup</li> <li>Check if you're on a VPN that might block the connection</li> <li>Verify the session is in \"Running\" status</li> </ul>"},{"location":"quick-start/#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udcd6 Complete Documentation</li> <li>\ud83d\udcac Community Support</li> <li>\ud83d\udc1b Report Issues</li> </ul> <p>Success Story</p> <p>\"I went from never using clouds to analyzing my furry data in under 10 minutes. The setup was so smooth!\" - Tabby Cat, University of Purr</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability in this project, please report it by sending an email to shiny.brar@nrc-cnrc.gc.ca.</p> <p>We will respond as quickly as possible to address the issue.</p>"},{"location":"security/#security-updates","title":"Security Updates","text":"<p>We will make security updates available as soon as they are ready. Please ensure you are using the latest version of the project to benefit from these updates.</p>"},{"location":"security/#acknowledgments","title":"Acknowledgments","text":"<p>We appreciate the efforts of the community in helping us improve the security of this project.</p>"},{"location":"session/","title":"Session API","text":"<p>Overview</p> <p>The <code>Session</code> API is the core of Skaha, enabling you to create, manage, and destroy sessions on the CANFAR Science Platform.</p> <p>               Bases: <code>SkahaClient</code></p> <p>Session Management Client.</p> <p>This class provides methods to manage sessions, including fetching session details, creating new sessions, retrieving logs, and destroying existing sessions.</p> <p>Parameters:</p> Name Type Description Default <code>SkahaClient</code> <code>SkahaClient</code> <p>Base HTTP client for making API requests.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import Session\n&gt;&gt;&gt; session = Session(\n        timeout=120,\n        concurrency=100, # No effect on sync client\n        loglevel=40,\n    )\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>class Session(SkahaClient):\n    \"\"\"Session Management Client.\n\n    This class provides methods to manage sessions, including fetching\n    session details, creating new sessions, retrieving logs, and\n    destroying existing sessions.\n\n    Args:\n        SkahaClient (SkahaClient): Base HTTP client for making API requests.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import Session\n        &gt;&gt;&gt; session = Session(\n                timeout=120,\n                concurrency=100, # No effect on sync client\n                loglevel=40,\n            )\n    \"\"\"\n\n    def fetch(\n        self,\n        kind: Kind | None = None,\n        status: Status | None = None,\n        view: View | None = None,\n    ) -&gt; list[dict[str, str]]:\n        \"\"\"Fetch open sessions for the user.\n\n        Args:\n            kind (Kind | None, optional): Session kind. Defaults to None.\n            status (Status | None, optional): Session status. Defaults to None.\n            view (View | None, optional): View leve. Defaults to None.\n\n        Returns:\n            list[dict[str, str]]: Session[s] information.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import Session\n            &gt;&gt;&gt; session = Session()\n            &gt;&gt;&gt; session.fetch(kind=\"notebook\")\n            [{'id': 'ikvp1jtp',\n              'userid': 'username',\n              'image': 'image-server/image/label:latest',\n              'type': 'notebook',\n              'status': 'Running',\n              'name': 'example-notebook',\n              'startTime': '2222-12-14T02:24:06Z',\n              'connectURL': 'https://something.example.com/ikvp1jtp',\n              'requestedRAM': '16G',\n              'requestedCPUCores': '2',\n              'requestedGPUCores': '&lt;none&gt;',\n              'coresInUse': '0m',\n              'ramInUse': '101Mi'}]\n        \"\"\"\n        parameters: dict[str, Any] = build.fetch_parameters(kind, status, view)\n        response: Response = self.client.get(url=\"session\", params=parameters)\n        data: list[dict[str, str]] = response.json()\n        return data\n\n    def stats(self) -&gt; dict[str, Any]:\n        \"\"\"Get statistics for the entire platform.\n\n        Returns:\n            Dict[str, Any]: Cluster statistics.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import Session\n            &gt;&gt;&gt; session = Session()\n            &gt;&gt;&gt; session.stats()\n            {'instances': {\n             'session': 88, 'desktopApp': 30, 'headless': 0, 'total': 118},\n             'cores': {'requestedCPUCores': 377,\n             'coresAvailable': 960,\n             'maxCores': {'cores': 32, 'withRam': '147Gi'}},\n             'ram': {'maxRAM': {'ram': '226Gi', 'withCores': 32}}}\n        \"\"\"\n        parameters = {\"view\": \"stats\"}\n        response: Response = self.client.get(\"session\", params=parameters)\n        data: dict[str, Any] = response.json()\n        return data\n\n    def info(self, ids: list[str] | str) -&gt; list[dict[str, Any]]:\n        \"\"\"Get information about session[s].\n\n        Args:\n            ids (Union[List[str], str]): Session ID[s].\n\n        Returns:\n            Dict[str, Any]: Session information.\n\n        Examples:\n            &gt;&gt;&gt; session.info(session_id=\"hjko98yghj\")\n            &gt;&gt;&gt; session.info(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        # Convert id to list if it is a string\n        if isinstance(ids, str):\n            ids = [ids]\n        parameters: dict[str, str] = {\"view\": \"event\"}\n        results: list[dict[str, Any]] = []\n        for value in ids:\n            try:\n                response: Response = self.client.get(\n                    url=f\"session/{value}\",\n                    params=parameters,\n                )\n                results.append(response.json())\n            except HTTPError:\n                err = f\"failed to fetch session info for {value}\"\n                log.exception(err)\n        return results\n\n    def logs(\n        self,\n        ids: list[str] | str,\n        verbose: bool = False,\n    ) -&gt; dict[str, str] | None:\n        \"\"\"Get logs from a session[s].\n\n        Args:\n            ids (Union[List[str], str]): Session ID[s].\n            verbose (bool, optional): Print logs to stdout. Defaults to False.\n\n        Returns:\n            Dict[str, str]: Logs in text/plain format.\n\n        Examples:\n            &gt;&gt;&gt; session.logs(id=\"hjko98yghj\")\n            &gt;&gt;&gt; session.logs(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        if isinstance(ids, str):\n            ids = [ids]\n        parameters: dict[str, str] = {\"view\": \"logs\"}\n        results: dict[str, str] = {}\n\n        for value in ids:\n            try:\n                response: Response = self.client.get(\n                    url=f\"session/{value}\",\n                    params=parameters,\n                )\n                results[value] = response.text\n            except HTTPError:\n                err = f\"failed to fetch logs for session {value}\"\n                log.exception(err)\n\n        if verbose:\n            for key, value in results.items():\n                log.info(\"Session ID: %s\\n\", key)\n                log.info(value)\n            return None\n\n        return results\n\n    def create(\n        self,\n        name: str,\n        image: str,\n        cores: int = 2,\n        ram: int = 4,\n        kind: Kind = \"headless\",\n        gpu: int | None = None,\n        cmd: str | None = None,\n        args: str | None = None,\n        env: dict[str, Any] | None = None,\n        replicas: int = 1,\n    ) -&gt; list[str]:\n        \"\"\"Launch a skaha session.\n\n        Args:\n            name (str): A unique name for the session.\n            image (str): Container image to use for the session.\n            cores (int, optional): Number of cores. Defaults to 2.\n            ram (int, optional): Amount of RAM (GB). Defaults to 4.\n            kind (str, optional): Type of skaha session. Defaults to \"headless\".\n            gpu (Optional[int], optional): Number of GPUs. Defaults to None.\n            cmd (Optional[str], optional): Command to run. Defaults to None.\n            args (Optional[str], optional): Arguments to the command. Defaults to None.\n            env (Optional[Dict[str, Any]], optional): Environment variables to inject.\n                Defaults to None.\n            replicas (int, optional): Number of sessions to launch. Defaults to 1.\n\n        Notes:\n            The name of the session suffixed with the replica number. eg. test-1, test-2\n            Each container will have the following environment variables injected:\n                * REPLICA_ID - The replica number\n                * REPLICA_COUNT - The total number of replicas\n\n        Returns:\n            List[str]: A list of session IDs for the launched sessions.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import Session\n            &gt;&gt;&gt; session = Session()\n            &gt;&gt;&gt; session.create(\n                    name=\"test\",\n                    image='images.canfar.net/skaha/terminal:1.1.1',\n                    cores=2,\n                    ram=8,\n                    gpu=1,\n                    kind=\"headless\",\n                    cmd=\"env\",\n                    env={\"TEST\": \"test\"},\n                    replicas=2,\n                )\n            &gt;&gt;&gt; [\"hjko98yghj\", \"ikvp1jtp\"]\n        \"\"\"\n        payloads = build.create_parameters(\n            name,\n            image,\n            cores,\n            ram,\n            kind,\n            gpu,\n            cmd,\n            args,\n            env,\n            replicas,\n        )\n        results: list[str] = []\n        log.debug(\"Creating %d %s session[s].\", replicas, kind)\n        for payload in payloads:\n            try:\n                response: Response = self.client.post(url=\"session\", params=payload)\n                results.append(response.text.rstrip(\"\\r\\n\"))\n            except HTTPError:\n                err = f\"Failed to create session with payload: {payload}\"\n                log.exception(err)\n        return results\n\n    def events(\n        self,\n        ids: str | list[str],\n        verbose: bool = False,\n    ) -&gt; list[dict[str, str]] | None:\n        \"\"\"Get deployment events for a session[s].\n\n        Args:\n            ids (Union[str, List[str]]): Session ID[s].\n            verbose (bool, optional): Print events to stdout. Defaults to False.\n\n        Returns:\n            Optional[List[Dict[str, str]]]: A list of events for the session[s].\n\n        Notes:\n            When verbose is True, the events will be printed to stdout only.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import Session\n            &gt;&gt;&gt; session = Session()\n            &gt;&gt;&gt; session.events(ids=\"hjko98yghj\")\n            &gt;&gt;&gt; session.events(ids=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        if isinstance(ids, str):\n            ids = [ids]\n        results: list[dict[str, str]] = []\n        parameters: dict[str, str] = {\"view\": \"events\"}\n        for value in ids:\n            try:\n                response: Response = self.client.get(\n                    url=f\"session/{value}\",\n                    params=parameters,\n                )\n                results.append({value: response.text})\n            except HTTPError:\n                err = f\"Failed to fetch events for session {value}\"\n                log.exception(err)\n        if verbose and results:\n            for result in results:\n                for key, value in result.items():\n                    log.info(\"Session ID: %s\", key)\n                    log.info(\"\\n %s\", value)\n        return results if not verbose else None\n\n    def destroy(self, ids: str | list[str]) -&gt; dict[str, bool]:\n        \"\"\"Destroy skaha session[s].\n\n        Args:\n            ids (Union[str, List[str]]): Session ID[s].\n\n        Returns:\n            Dict[str, bool]: A dictionary of session IDs\n            and a bool indicating if the session was destroyed.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import Session\n            &gt;&gt;&gt; session = Session()\n            &gt;&gt;&gt; session.destroy(id=\"hjko98yghj\")\n            &gt;&gt;&gt; session.destroy(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n        \"\"\"\n        if isinstance(ids, str):\n            ids = [ids]\n        results: dict[str, bool] = {}\n        for value in ids:\n            try:\n                self.client.delete(url=f\"session/{value}\")\n                results[value] = True\n            except HTTPError:\n                msg = f\"Failed to destroy session {value}\"\n                log.exception(msg)\n                results[value] = False\n        return results\n\n    def destroy_with(\n        self,\n        prefix: str,\n        kind: Kind = \"headless\",\n        status: Status = \"Succeeded\",\n    ) -&gt; dict[str, bool]:\n        \"\"\"Destroy session[s] matching search criteria.\n\n        Args:\n            prefix (str): Prefix to match in the session name.\n            kind (Kind): Type of session. Defaults to \"headless\".\n            status (Status): Status of the session. Defaults to \"Succeeded\".\n\n\n        Returns:\n            Dict[str, bool]: A dictionary of session IDs\n            and a bool indicating if the session was destroyed.\n\n        Notes:\n            The prefix is case-sensitive.\n            This method is useful for destroying multiple sessions at once.\n\n        Examples:\n            &gt;&gt;&gt; from skaha.session import Session\n            &gt;&gt;&gt; session = Session()\n            &gt;&gt;&gt; session.destroy_with(prefix=\"test\")\n            &gt;&gt;&gt; session.destroy_with(prefix=\"test\", kind=\"desktop\")\n            &gt;&gt;&gt; session.destroy_with(prefix=\"test\", kind=\"headless\", status=\"Running\")\n\n        \"\"\"\n        sessions = self.fetch(kind=kind, status=status)\n        ids: list[str] = [\n            session[\"id\"] for session in sessions if session[\"name\"].startswith(prefix)\n        ]\n        return self.destroy(ids)\n</code></pre>"},{"location":"session/#skaha.session.Session.create","title":"<code>create(name, image, cores=2, ram=4, kind='headless', gpu=None, cmd=None, args=None, env=None, replicas=1)</code>","text":"<p>Launch a skaha session.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A unique name for the session.</p> required <code>image</code> <code>str</code> <p>Container image to use for the session.</p> required <code>cores</code> <code>int</code> <p>Number of cores. Defaults to 2.</p> <code>2</code> <code>ram</code> <code>int</code> <p>Amount of RAM (GB). Defaults to 4.</p> <code>4</code> <code>kind</code> <code>str</code> <p>Type of skaha session. Defaults to \"headless\".</p> <code>'headless'</code> <code>gpu</code> <code>Optional[int]</code> <p>Number of GPUs. Defaults to None.</p> <code>None</code> <code>cmd</code> <code>Optional[str]</code> <p>Command to run. Defaults to None.</p> <code>None</code> <code>args</code> <code>Optional[str]</code> <p>Arguments to the command. Defaults to None.</p> <code>None</code> <code>env</code> <code>Optional[Dict[str, Any]]</code> <p>Environment variables to inject. Defaults to None.</p> <code>None</code> <code>replicas</code> <code>int</code> <p>Number of sessions to launch. Defaults to 1.</p> <code>1</code> Notes <p>The name of the session suffixed with the replica number. eg. test-1, test-2 Each container will have the following environment variables injected:     * REPLICA_ID - The replica number     * REPLICA_COUNT - The total number of replicas</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List[str]: A list of session IDs for the launched sessions.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import Session\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; session.create(\n        name=\"test\",\n        image='images.canfar.net/skaha/terminal:1.1.1',\n        cores=2,\n        ram=8,\n        gpu=1,\n        kind=\"headless\",\n        cmd=\"env\",\n        env={\"TEST\": \"test\"},\n        replicas=2,\n    )\n&gt;&gt;&gt; [\"hjko98yghj\", \"ikvp1jtp\"]\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def create(\n    self,\n    name: str,\n    image: str,\n    cores: int = 2,\n    ram: int = 4,\n    kind: Kind = \"headless\",\n    gpu: int | None = None,\n    cmd: str | None = None,\n    args: str | None = None,\n    env: dict[str, Any] | None = None,\n    replicas: int = 1,\n) -&gt; list[str]:\n    \"\"\"Launch a skaha session.\n\n    Args:\n        name (str): A unique name for the session.\n        image (str): Container image to use for the session.\n        cores (int, optional): Number of cores. Defaults to 2.\n        ram (int, optional): Amount of RAM (GB). Defaults to 4.\n        kind (str, optional): Type of skaha session. Defaults to \"headless\".\n        gpu (Optional[int], optional): Number of GPUs. Defaults to None.\n        cmd (Optional[str], optional): Command to run. Defaults to None.\n        args (Optional[str], optional): Arguments to the command. Defaults to None.\n        env (Optional[Dict[str, Any]], optional): Environment variables to inject.\n            Defaults to None.\n        replicas (int, optional): Number of sessions to launch. Defaults to 1.\n\n    Notes:\n        The name of the session suffixed with the replica number. eg. test-1, test-2\n        Each container will have the following environment variables injected:\n            * REPLICA_ID - The replica number\n            * REPLICA_COUNT - The total number of replicas\n\n    Returns:\n        List[str]: A list of session IDs for the launched sessions.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import Session\n        &gt;&gt;&gt; session = Session()\n        &gt;&gt;&gt; session.create(\n                name=\"test\",\n                image='images.canfar.net/skaha/terminal:1.1.1',\n                cores=2,\n                ram=8,\n                gpu=1,\n                kind=\"headless\",\n                cmd=\"env\",\n                env={\"TEST\": \"test\"},\n                replicas=2,\n            )\n        &gt;&gt;&gt; [\"hjko98yghj\", \"ikvp1jtp\"]\n    \"\"\"\n    payloads = build.create_parameters(\n        name,\n        image,\n        cores,\n        ram,\n        kind,\n        gpu,\n        cmd,\n        args,\n        env,\n        replicas,\n    )\n    results: list[str] = []\n    log.debug(\"Creating %d %s session[s].\", replicas, kind)\n    for payload in payloads:\n        try:\n            response: Response = self.client.post(url=\"session\", params=payload)\n            results.append(response.text.rstrip(\"\\r\\n\"))\n        except HTTPError:\n            err = f\"Failed to create session with payload: {payload}\"\n            log.exception(err)\n    return results\n</code></pre>"},{"location":"session/#skaha.session.Session.destroy","title":"<code>destroy(ids)</code>","text":"<p>Destroy skaha session[s].</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Union[str, List[str]]</code> <p>Session ID[s].</p> required <p>Returns:</p> Type Description <code>dict[str, bool]</code> <p>Dict[str, bool]: A dictionary of session IDs</p> <code>dict[str, bool]</code> <p>and a bool indicating if the session was destroyed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import Session\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; session.destroy(id=\"hjko98yghj\")\n&gt;&gt;&gt; session.destroy(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def destroy(self, ids: str | list[str]) -&gt; dict[str, bool]:\n    \"\"\"Destroy skaha session[s].\n\n    Args:\n        ids (Union[str, List[str]]): Session ID[s].\n\n    Returns:\n        Dict[str, bool]: A dictionary of session IDs\n        and a bool indicating if the session was destroyed.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import Session\n        &gt;&gt;&gt; session = Session()\n        &gt;&gt;&gt; session.destroy(id=\"hjko98yghj\")\n        &gt;&gt;&gt; session.destroy(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    if isinstance(ids, str):\n        ids = [ids]\n    results: dict[str, bool] = {}\n    for value in ids:\n        try:\n            self.client.delete(url=f\"session/{value}\")\n            results[value] = True\n        except HTTPError:\n            msg = f\"Failed to destroy session {value}\"\n            log.exception(msg)\n            results[value] = False\n    return results\n</code></pre>"},{"location":"session/#skaha.session.Session.destroy_with","title":"<code>destroy_with(prefix, kind='headless', status='Succeeded')</code>","text":"<p>Destroy session[s] matching search criteria.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>Prefix to match in the session name.</p> required <code>kind</code> <code>Kind</code> <p>Type of session. Defaults to \"headless\".</p> <code>'headless'</code> <code>status</code> <code>Status</code> <p>Status of the session. Defaults to \"Succeeded\".</p> <code>'Succeeded'</code> <p>Returns:</p> Type Description <code>dict[str, bool]</code> <p>Dict[str, bool]: A dictionary of session IDs</p> <code>dict[str, bool]</code> <p>and a bool indicating if the session was destroyed.</p> Notes <p>The prefix is case-sensitive. This method is useful for destroying multiple sessions at once.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import Session\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; session.destroy_with(prefix=\"test\")\n&gt;&gt;&gt; session.destroy_with(prefix=\"test\", kind=\"desktop\")\n&gt;&gt;&gt; session.destroy_with(prefix=\"test\", kind=\"headless\", status=\"Running\")\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def destroy_with(\n    self,\n    prefix: str,\n    kind: Kind = \"headless\",\n    status: Status = \"Succeeded\",\n) -&gt; dict[str, bool]:\n    \"\"\"Destroy session[s] matching search criteria.\n\n    Args:\n        prefix (str): Prefix to match in the session name.\n        kind (Kind): Type of session. Defaults to \"headless\".\n        status (Status): Status of the session. Defaults to \"Succeeded\".\n\n\n    Returns:\n        Dict[str, bool]: A dictionary of session IDs\n        and a bool indicating if the session was destroyed.\n\n    Notes:\n        The prefix is case-sensitive.\n        This method is useful for destroying multiple sessions at once.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import Session\n        &gt;&gt;&gt; session = Session()\n        &gt;&gt;&gt; session.destroy_with(prefix=\"test\")\n        &gt;&gt;&gt; session.destroy_with(prefix=\"test\", kind=\"desktop\")\n        &gt;&gt;&gt; session.destroy_with(prefix=\"test\", kind=\"headless\", status=\"Running\")\n\n    \"\"\"\n    sessions = self.fetch(kind=kind, status=status)\n    ids: list[str] = [\n        session[\"id\"] for session in sessions if session[\"name\"].startswith(prefix)\n    ]\n    return self.destroy(ids)\n</code></pre>"},{"location":"session/#skaha.session.Session.events","title":"<code>events(ids, verbose=False)</code>","text":"<p>Get deployment events for a session[s].</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Union[str, List[str]]</code> <p>Session ID[s].</p> required <code>verbose</code> <code>bool</code> <p>Print events to stdout. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[dict[str, str]] | None</code> <p>Optional[List[Dict[str, str]]]: A list of events for the session[s].</p> Notes <p>When verbose is True, the events will be printed to stdout only.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import Session\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; session.events(ids=\"hjko98yghj\")\n&gt;&gt;&gt; session.events(ids=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def events(\n    self,\n    ids: str | list[str],\n    verbose: bool = False,\n) -&gt; list[dict[str, str]] | None:\n    \"\"\"Get deployment events for a session[s].\n\n    Args:\n        ids (Union[str, List[str]]): Session ID[s].\n        verbose (bool, optional): Print events to stdout. Defaults to False.\n\n    Returns:\n        Optional[List[Dict[str, str]]]: A list of events for the session[s].\n\n    Notes:\n        When verbose is True, the events will be printed to stdout only.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import Session\n        &gt;&gt;&gt; session = Session()\n        &gt;&gt;&gt; session.events(ids=\"hjko98yghj\")\n        &gt;&gt;&gt; session.events(ids=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    if isinstance(ids, str):\n        ids = [ids]\n    results: list[dict[str, str]] = []\n    parameters: dict[str, str] = {\"view\": \"events\"}\n    for value in ids:\n        try:\n            response: Response = self.client.get(\n                url=f\"session/{value}\",\n                params=parameters,\n            )\n            results.append({value: response.text})\n        except HTTPError:\n            err = f\"Failed to fetch events for session {value}\"\n            log.exception(err)\n    if verbose and results:\n        for result in results:\n            for key, value in result.items():\n                log.info(\"Session ID: %s\", key)\n                log.info(\"\\n %s\", value)\n    return results if not verbose else None\n</code></pre>"},{"location":"session/#skaha.session.Session.fetch","title":"<code>fetch(kind=None, status=None, view=None)</code>","text":"<p>Fetch open sessions for the user.</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>Kind | None</code> <p>Session kind. Defaults to None.</p> <code>None</code> <code>status</code> <code>Status | None</code> <p>Session status. Defaults to None.</p> <code>None</code> <code>view</code> <code>View | None</code> <p>View leve. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict[str, str]]</code> <p>list[dict[str, str]]: Session[s] information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import Session\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; session.fetch(kind=\"notebook\")\n[{'id': 'ikvp1jtp',\n  'userid': 'username',\n  'image': 'image-server/image/label:latest',\n  'type': 'notebook',\n  'status': 'Running',\n  'name': 'example-notebook',\n  'startTime': '2222-12-14T02:24:06Z',\n  'connectURL': 'https://something.example.com/ikvp1jtp',\n  'requestedRAM': '16G',\n  'requestedCPUCores': '2',\n  'requestedGPUCores': '&lt;none&gt;',\n  'coresInUse': '0m',\n  'ramInUse': '101Mi'}]\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def fetch(\n    self,\n    kind: Kind | None = None,\n    status: Status | None = None,\n    view: View | None = None,\n) -&gt; list[dict[str, str]]:\n    \"\"\"Fetch open sessions for the user.\n\n    Args:\n        kind (Kind | None, optional): Session kind. Defaults to None.\n        status (Status | None, optional): Session status. Defaults to None.\n        view (View | None, optional): View leve. Defaults to None.\n\n    Returns:\n        list[dict[str, str]]: Session[s] information.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import Session\n        &gt;&gt;&gt; session = Session()\n        &gt;&gt;&gt; session.fetch(kind=\"notebook\")\n        [{'id': 'ikvp1jtp',\n          'userid': 'username',\n          'image': 'image-server/image/label:latest',\n          'type': 'notebook',\n          'status': 'Running',\n          'name': 'example-notebook',\n          'startTime': '2222-12-14T02:24:06Z',\n          'connectURL': 'https://something.example.com/ikvp1jtp',\n          'requestedRAM': '16G',\n          'requestedCPUCores': '2',\n          'requestedGPUCores': '&lt;none&gt;',\n          'coresInUse': '0m',\n          'ramInUse': '101Mi'}]\n    \"\"\"\n    parameters: dict[str, Any] = build.fetch_parameters(kind, status, view)\n    response: Response = self.client.get(url=\"session\", params=parameters)\n    data: list[dict[str, str]] = response.json()\n    return data\n</code></pre>"},{"location":"session/#skaha.session.Session.info","title":"<code>info(ids)</code>","text":"<p>Get information about session[s].</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Union[List[str], str]</code> <p>Session ID[s].</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>Dict[str, Any]: Session information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; session.info(session_id=\"hjko98yghj\")\n&gt;&gt;&gt; session.info(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def info(self, ids: list[str] | str) -&gt; list[dict[str, Any]]:\n    \"\"\"Get information about session[s].\n\n    Args:\n        ids (Union[List[str], str]): Session ID[s].\n\n    Returns:\n        Dict[str, Any]: Session information.\n\n    Examples:\n        &gt;&gt;&gt; session.info(session_id=\"hjko98yghj\")\n        &gt;&gt;&gt; session.info(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    # Convert id to list if it is a string\n    if isinstance(ids, str):\n        ids = [ids]\n    parameters: dict[str, str] = {\"view\": \"event\"}\n    results: list[dict[str, Any]] = []\n    for value in ids:\n        try:\n            response: Response = self.client.get(\n                url=f\"session/{value}\",\n                params=parameters,\n            )\n            results.append(response.json())\n        except HTTPError:\n            err = f\"failed to fetch session info for {value}\"\n            log.exception(err)\n    return results\n</code></pre>"},{"location":"session/#skaha.session.Session.logs","title":"<code>logs(ids, verbose=False)</code>","text":"<p>Get logs from a session[s].</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Union[List[str], str]</code> <p>Session ID[s].</p> required <code>verbose</code> <code>bool</code> <p>Print logs to stdout. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict[str, str] | None</code> <p>Dict[str, str]: Logs in text/plain format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; session.logs(id=\"hjko98yghj\")\n&gt;&gt;&gt; session.logs(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def logs(\n    self,\n    ids: list[str] | str,\n    verbose: bool = False,\n) -&gt; dict[str, str] | None:\n    \"\"\"Get logs from a session[s].\n\n    Args:\n        ids (Union[List[str], str]): Session ID[s].\n        verbose (bool, optional): Print logs to stdout. Defaults to False.\n\n    Returns:\n        Dict[str, str]: Logs in text/plain format.\n\n    Examples:\n        &gt;&gt;&gt; session.logs(id=\"hjko98yghj\")\n        &gt;&gt;&gt; session.logs(id=[\"hjko98yghj\", \"ikvp1jtp\"])\n    \"\"\"\n    if isinstance(ids, str):\n        ids = [ids]\n    parameters: dict[str, str] = {\"view\": \"logs\"}\n    results: dict[str, str] = {}\n\n    for value in ids:\n        try:\n            response: Response = self.client.get(\n                url=f\"session/{value}\",\n                params=parameters,\n            )\n            results[value] = response.text\n        except HTTPError:\n            err = f\"failed to fetch logs for session {value}\"\n            log.exception(err)\n\n    if verbose:\n        for key, value in results.items():\n            log.info(\"Session ID: %s\\n\", key)\n            log.info(value)\n        return None\n\n    return results\n</code></pre>"},{"location":"session/#skaha.session.Session.stats","title":"<code>stats()</code>","text":"<p>Get statistics for the entire platform.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dict[str, Any]: Cluster statistics.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from skaha.session import Session\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; session.stats()\n{'instances': {\n 'session': 88, 'desktopApp': 30, 'headless': 0, 'total': 118},\n 'cores': {'requestedCPUCores': 377,\n 'coresAvailable': 960,\n 'maxCores': {'cores': 32, 'withRam': '147Gi'}},\n 'ram': {'maxRAM': {'ram': '226Gi', 'withCores': 32}}}\n</code></pre> Source code in <code>skaha/session.py</code> <pre><code>def stats(self) -&gt; dict[str, Any]:\n    \"\"\"Get statistics for the entire platform.\n\n    Returns:\n        Dict[str, Any]: Cluster statistics.\n\n    Examples:\n        &gt;&gt;&gt; from skaha.session import Session\n        &gt;&gt;&gt; session = Session()\n        &gt;&gt;&gt; session.stats()\n        {'instances': {\n         'session': 88, 'desktopApp': 30, 'headless': 0, 'total': 118},\n         'cores': {'requestedCPUCores': 377,\n         'coresAvailable': 960,\n         'maxCores': {'cores': 32, 'withRam': '147Gi'}},\n         'ram': {'maxRAM': {'ram': '226Gi', 'withCores': 32}}}\n    \"\"\"\n    parameters = {\"view\": \"stats\"}\n    response: Response = self.client.get(\"session\", params=parameters)\n    data: dict[str, Any] = response.json()\n    return data\n</code></pre>"},{"location":"testing/","title":"Testing","text":"<p>This document provides comprehensive information about testing in the Skaha project.</p>"},{"location":"testing/#overview","title":"Overview","text":"<p>Skaha uses pytest as its testing framework. The test suite includes unit tests, integration tests, and end-to-end tests that verify the functionality of the Skaha client library.</p>"},{"location":"testing/#prerequisites","title":"Prerequisites","text":"<p>To run tests for Skaha, you need:</p> <ol> <li>Valid CANFAR Account: Access to the CANFAR Science Platform</li> <li>X.509 Certificate: For authentication with CANFAR services</li> <li>Python Environment: Set up with uv</li> </ol> <p>For certificate generation, refer to the get started section.</p>"},{"location":"testing/#running-tests","title":"Running Tests","text":""},{"location":"testing/#basic-test-execution","title":"Basic Test Execution","text":"<p>Run all tests: <pre><code>uv run pytest\n</code></pre></p> <p>Run tests with verbose output: <pre><code>uv run pytest -v\n</code></pre></p> <p>Run tests with coverage report: <pre><code>uv run pytest --cov\n</code></pre></p>"},{"location":"testing/#test-categories","title":"Test Categories","text":"<p>Skaha tests are organized with markers to help you run specific subsets:</p>"},{"location":"testing/#slow-tests","title":"Slow Tests","text":"<p>Some tests are marked as \"slow\" because they involve: - Network operations with CANFAR services - Waiting for session state changes - Authentication timeouts - Long-running operations</p> <p>Skip slow tests for faster development: <pre><code>uv run pytest -m \"not slow\"\n</code></pre></p> <p>Run only slow tests: <pre><code>uv run pytest -m \"slow\"\n</code></pre></p>"},{"location":"testing/#integration-tests","title":"Integration Tests","text":"<p>Tests that interact with external services: <pre><code>uv run pytest -m \"integration\"\n</code></pre></p>"},{"location":"testing/#unit-tests","title":"Unit Tests","text":"<p>Fast, isolated tests: <pre><code>uv run pytest -m \"unit\"\n</code></pre></p>"},{"location":"testing/#test-methodology","title":"Test Methodology","text":"<p>Tests are organized in the <code>tests/</code> directory and follow a specific naming convention that mirrors the source code structure. This approach ensures that tests are easy to locate and maintain.</p> <p>The naming convention is as follows:</p> <ul> <li>If the source file is <code>skaha/path/to/file.py</code>, the corresponding test file will be <code>tests/test_path_to_file.py</code>.</li> <li>If the source file is <code>skaha/module.py</code>, the corresponding test file will be <code>tests/test_module.py</code>.</li> </ul> <p>For example:</p> <ul> <li>The tests for <code>skaha/client.py</code> are located in <code>tests/test_client.py</code>.</li> <li>The tests for <code>skaha/auth/oidc.py</code> are located in <code>tests/test_auth_oidc.py</code>.</li> </ul> <p>This structure makes it straightforward to find the tests associated with a particular module or file.</p>"},{"location":"testing/#development-workflow","title":"Development Workflow","text":"<p>For efficient development, follow this testing workflow:</p> <ol> <li> <p>During Development: Run fast tests only    <pre><code>uv run pytest -m \"not slow\"\n</code></pre></p> </li> <li> <p>Before Committing: Run the full test suite    <pre><code>uv run pytest\n</code></pre></p> </li> <li> <p>Debugging Specific Issues: Run individual test files    <pre><code>uv run pytest tests/test_session.py\n</code></pre></p> </li> </ol>"},{"location":"testing/#test-configuration","title":"Test Configuration","text":"<p>Test configuration is defined in <code>pyproject.toml</code>:</p> <pre><code>[tool.pytest.ini_options]\nmarkers = [\n    \"integration: marks tests as integration tests\",\n    \"unit: marks tests as unit tests\",\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n    \"order: marks tests that need to run in a specific order\",\n]\n</code></pre>"},{"location":"testing/#continuous-integration","title":"Continuous Integration","text":"<p>In CI environments, all tests (including slow ones) are executed to ensure complete validation. The CI pipeline:</p> <ol> <li>Sets up authentication with CANFAR</li> <li>Runs the complete test suite</li> <li>Generates coverage reports</li> <li>Cleans up authentication artifacts</li> </ol>"},{"location":"testing/#writing-tests","title":"Writing Tests","text":"<p>When contributing new tests:</p> <ol> <li>Follow the naming convention: Create a test file that mirrors the source file's path and name.</li> <li>Mark slow tests: Add <code>@pytest.mark.slow</code> to any test that involves network operations, interacts with external services, or has long execution times. This allows developers to skip these tests for a faster development cycle.</li> <li>Use appropriate markers: Mark tests as <code>unit</code>, <code>integration</code>, etc.</li> <li>Add docstrings: Document what each test verifies.</li> </ol> <p>Example of a slow test: <pre><code>import pytest\n\n@pytest.mark.slow\ndef test_long_running_operation():\n    \"\"\"Test that involves waiting or network operations.\"\"\"\n    # Test implementation\n    pass\n</code></pre></p>"},{"location":"testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"testing/#authentication-issues","title":"Authentication Issues","text":"<ul> <li>Ensure your X.509 certificate is valid and not expired</li> <li>Check that you have access to the CANFAR Science Platform</li> <li>Verify your certificate is in the correct location (<code>~/.ssl/</code>)</li> </ul>"},{"location":"testing/#slow-test-timeouts","title":"Slow Test Timeouts","text":"<ul> <li>Slow tests have built-in timeouts (typically 60 seconds)</li> <li>If tests consistently timeout, check your network connection</li> <li>Platform availability may affect test execution times</li> </ul>"},{"location":"testing/#test-failures","title":"Test Failures","text":"<ul> <li>Check if the CANFAR Science Platform is accessible</li> <li>Verify your authentication credentials</li> <li>Review test logs for specific error messages</li> </ul>"},{"location":"updates/","title":"What's New in Skaha","text":"<p>Stay up to date with the latest features, improvements, and changes in Skaha.</p>"},{"location":"updates/#recent-updates","title":"Recent Updates","text":"<p>New in v1.7+</p> <p>New in v1.4+</p>"},{"location":"updates/#enhanced-authentication-system","title":"\ud83d\udd10 Enhanced Authentication System","text":"<p>Skaha now features a comprehensive authentication system with support for multiple authentication modes and automatic credential management.</p> Authentication Examples<pre><code>from skaha.client import SkahaClient\nfrom pathlib import Path\n\n# X.509 certificate authentication\nclient = SkahaClient(certificate=Path(\"/path/to/cert.pem\"))\n\n# OIDC token authentication (configured)\nclient = SkahaClient()  # Uses auth.mode = \"oidc\"\n\n# Bearer token authentication\nfrom pydantic import SecretStr\nclient = SkahaClient(token=SecretStr(\"your-token\"))\n</code></pre>"},{"location":"updates/#asynchronous-sessions","title":"\ud83d\ude80 Asynchronous Sessions","text":"<p>Skaha now supports asynchronous sessions using the <code>AsyncSession</code> class while maintaining 1-to-1 compatibility with the <code>Session</code> class.</p> Asynchronous Session Creation<pre><code>from skaha.session import AsyncSession\n\nasession = AsyncSession()\nresponse = await asession.create(\n    name=\"test\",\n    image=\"images.canfar.net/skaha/base-notebook:latest\",\n    cores=2,\n    ram=8,\n    gpu=1,\n    kind=\"headless\",\n    cmd=\"env\",\n    env={\"KEY\": \"VALUE\"},\n    replicas=3,\n)\n</code></pre>"},{"location":"updates/#backend-upgrades","title":"\ud83d\uddc4\ufe0f Backend Upgrades","text":"<ul> <li>\ud83d\udce1 Skaha now uses the <code>httpx</code> library for making HTTP requests instead of <code>requests</code>. This adds asynchronous support and also to circumvent the <code>requests</code> dependence on <code>urllib3</code> which was causing SSL issues on MacOS. See this issue for more details.</li> <li>\ud83d\udd11 Skaha now supports multiple authentication methods including X.509 certificates, OIDC tokens, and bearer tokens with automatic SSL context management.</li> <li>\ud83c\udfce\ufe0f\ud83d\udca8 Added <code>loglevel</code> and <code>concurrency</code> support to manage the new explosion in functionality!</li> <li>\ud83d\udd0d Comprehensive debug logging for authentication flow and client creation troubleshooting.</li> </ul>"},{"location":"updates/#logs-to-stdout","title":"\ud83e\uddfe Logs to <code>stdout</code>","text":"<p>The <code>[Session|AsyncSession].logs</code> method now prints colored output to <code>stdout</code> instead of returning them as a string with <code>verbose=True</code> flag.</p> Session Logs<pre><code>from skaha.session import AsyncSession\n\nasession = AsyncSession()\nawait asession.logs(ids=[\"some-uuid\"], verbose=True)\n</code></pre>"},{"location":"updates/#firefly-support","title":"\ud83e\udeb0 Firefly Support","text":"<p>Skaha now supports launching <code>firefly</code> session on the CANFAR Science Platform.</p> Firefly Session Creation<pre><code>session.create(\n    name=\"firefly\",\n    image=\"images.canfar.net/skaha/firefly:latest\",\n)\n</code></pre>"},{"location":"updates/#private-images","title":"\ud83d\udd10 Private Images","text":"<p>Starting October 2024, to create a session with a private container image from the CANFAR Harbor Registry, you will need to provide your harbor <code>username</code> and the <code>CLI Secret</code> through a <code>ContainerRegistry</code> object.</p> Private Image Registry Configuration<pre><code>from skaha.models import ContainerRegistry\nfrom skaha.session import Session\n\nregistry = ContainerRegistry(username=\"username\", secret=\"sUp3rS3cr3t\")\nsession = Session(registry=registry)\n</code></pre> <p>Alternatively, if you have environment variables, <code>SKAHA_REGISTRY_USERNAME</code> and <code>SKAHA_REGISTRY_SECRET</code>, you can create a <code>ContainerRegistry</code> object without providing the <code>username</code> and <code>secret</code>.</p> Private Image Registry with Environment Variables<pre><code>from skaha.models import ContainerRegistry\n\nregistry = ContainerRegistry()\n</code></pre>"},{"location":"updates/#destroy-sessions","title":"\ud83d\udca3 Destroy Sessions","text":"Destroying Sessions<pre><code>from skaha.session import Session\n\nsession = Session()\nsession.destroy_with(prefix=\"test\", kind=\"headless\", status=\"Running\")\nsession.destroy_with(prefix=\"test\", kind=\"headless\", status=\"Pending\")\n</code></pre>"},{"location":"updates/#previous-versions","title":"Previous Versions","text":"<p>For a complete history of changes, see the Changelog.</p>"},{"location":"updates/#stay-updated","title":"Stay Updated","text":"<ul> <li>\ud83d\udce2 GitHub Releases</li> <li>\ud83d\udcdd Changelog</li> <li>\ud83d\udcac Discussions</li> </ul>"}]}